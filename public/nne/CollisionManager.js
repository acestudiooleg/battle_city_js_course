/**
 * üéÆ –ö–ª–∞—Å CollisionManager - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ª—ñ–∑—ñ–π
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∑—ñ—Ç–∫–Ω–µ–Ω—å –º—ñ–∂ –æ–±'—î–∫—Ç–∞–º–∏
 * - –û–±—Ä–æ–±–∫—É –ø–æ—à–∫–æ–¥–∂–µ–Ω—å
 * - –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ—Ç–∫–Ω—É—Ç–∏—Ö –æ–±'—î–∫—Ç—ñ–≤
 * - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –≤–∏–±—É—Ö—ñ–≤
 */

export class CollisionManager {
  constructor(logger, game = null) {
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª—ñ–∑—ñ–π
    this.stats = {
      totalCollisions: 0,
      playerHits: 0,
      enemyHits: 0,
      bulletCollisions: 0,
      wallDestructions: 0,
    };

    // –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –ø–æ–¥—ñ–π
    this.logger = logger;
    
    // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≥—Ä—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–±—É—Ö—ñ–≤
    this.game = game;

    this.logger.gameEvent('–°–∏—Å—Ç–µ–º–∞ –∫–æ–ª—ñ–∑—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Å—ñ—Ö –∫–æ–ª—ñ–∑—ñ–π –≤ –≥—Ä—ñ
   * @param {Object} gameObjects - –û–±'—î–∫—Ç–∏ –≥—Ä–∏
   */
  checkAllCollisions(gameObjects) {
    const { player, enemy, gameField } = gameObjects;

    if (!player || !enemy) return;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó –∫—É–ª—å –≥—Ä–∞–≤—Ü—è –∑ –≤–æ—Ä–æ–≥–æ–º
    this.checkPlayerBulletsCollisions(player, enemy, gameField);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó –∫—É–ª—å –≤–æ—Ä–æ–≥–∞ –∑ –≥—Ä–∞–≤—Ü–µ–º
    this.checkEnemyBulletsCollisions(enemy, player, gameField);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó –∫—É–ª—å –≤–æ—Ä–æ–≥–∞ –∑—ñ —à—Ç–∞–±–æ–º
    this.checkEnemyBulletsWithBaseCollisions(enemy, gameField);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó –∫—É–ª—å –º—ñ–∂ —Å–æ–±–æ—é
    this.checkBulletToBulletCollisions(player, enemy);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó –∑ –º–µ–∂–∞–º–∏ –ø–æ–ª—è
    this.checkBoundaryCollisions(player, enemy, gameField);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—ó –∫—É–ª—å –∑—ñ —Å—Ç—ñ–Ω–∞–º–∏
    this.checkBulletWallCollisions(player, enemy, gameField);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∫—É–ª—å –≥—Ä–∞–≤—Ü—è –∑ –≤–æ—Ä–æ–≥–æ–º
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   */
  checkPlayerBulletsCollisions(player, enemy, gameField) {
    if (!player.isAlive || !enemy.isAlive || player.isPlayerRespawning()) return;

    const playerBullets = player.getBullets();

    for (let i = playerBullets.length - 1; i >= 0; i--) {
      const bullet = playerBullets[i];

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—é –∫—É–ª—ñ –∑ –≤–æ—Ä–æ–≥–æ–º
      if (this.checkCollision(bullet, enemy)) {
        this.handlePlayerHitEnemy(player, enemy, bullet);
        break; // –í–∏—Ö–æ–¥–∏–º–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–Ω—è
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫—É–ª—è –≤–∏–π—à–ª–∞ –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è
      if (this.isBulletOutOfBounds(bullet, gameField)) {
        player.removeBullet(bullet);
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∫—É–ª—å –≤–æ—Ä–æ–≥–∞ –∑ –≥—Ä–∞–≤—Ü–µ–º
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   */
  checkEnemyBulletsCollisions(enemy, player, gameField) {
    if (!enemy.isAlive || !player.isAlive || player.isPlayerRespawning()) return;

    const enemyBullets = enemy.getBullets();

    for (let i = enemyBullets.length - 1; i >= 0; i--) {
      const bullet = enemyBullets[i];

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ–∑—ñ—é –∫—É–ª—ñ –∑ –≥—Ä–∞–≤—Ü–µ–º
      if (this.checkCollision(bullet, player)) {
        this.handleEnemyHitPlayer(enemy, player, bullet);
        break; // –í–∏—Ö–æ–¥–∏–º–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–Ω—è
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫—É–ª—è –≤–∏–π—à–ª–∞ –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è
      if (this.isBulletOutOfBounds(bullet, gameField)) {
        enemy.removeBullet(bullet);
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∫—É–ª—å –≤–æ—Ä–æ–≥–∞ –∑—ñ —à—Ç–∞–±–æ–º
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   */
  checkEnemyBulletsWithBaseCollisions(enemy, gameField) {
    if (!enemy.isAlive) return;

    const enemyBullets = enemy.getBullets();
    const base = gameField.getBase();

    for (let i = enemyBullets.length - 1; i >= 0; i--) {
      const bullet = enemyBullets[i];

      if (this.checkBulletBaseCollision(bullet, base)) {
        this.handleEnemyHitBase(enemy, gameField, bullet);
        break;
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∫—É–ª—å –º—ñ–∂ —Å–æ–±–æ—é
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   */
  checkBulletToBulletCollisions(player, enemy) {
    if (!player.isAlive || !enemy.isAlive) return;

    const playerBullets = player.getBullets();
    const enemyBullets = enemy.getBullets();

    for (let i = playerBullets.length - 1; i >= 0; i--) {
      const playerBullet = playerBullets[i];

      for (let j = enemyBullets.length - 1; j >= 0; j--) {
        const enemyBullet = enemyBullets[j];

        if (this.checkCollision(playerBullet, enemyBullet)) {
          this.handleBulletCollision(playerBullet, enemyBullet, player, enemy);
          break;
        }
      }
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∑ –º–µ–∂–∞–º–∏ –ø–æ–ª—è
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   */
  checkBoundaryCollisions(player, enemy, gameField) {
    if (this.isTankOutOfBounds(player, gameField)) {
      this.handleTankOutOfBounds(player, gameField);
    }

    if (this.isTankOutOfBounds(enemy, gameField)) {
      this.handleTankOutOfBounds(enemy, gameField);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ—ó –º—ñ–∂ –¥–≤–æ–º–∞ –æ–±'—î–∫—Ç–∞–º–∏
   * @param {Object} obj1 - –ü–µ—Ä—à–∏–π –æ–±'—î–∫—Ç
   * @param {Object} obj2 - –î—Ä—É–≥–∏–π –æ–±'—î–∫—Ç
   * @returns {boolean} - true —è–∫—â–æ —î –∫–æ–ª—ñ–∑—ñ—è
   */
  checkCollision(obj1, obj2) {
    return obj1.x < obj2.x + obj2.width &&
           obj1.x + obj1.width > obj2.x &&
           obj1.y < obj2.y + obj2.height &&
           obj1.y + obj1.height > obj2.y;
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –ø–æ –≤–æ—Ä–æ–≥—É
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {Bullet} bullet - –ö—É–ª—è
   */
  handlePlayerHitEnemy(player, enemy, bullet) {
    this.stats.totalCollisions++;
    this.stats.enemyHits++;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–±—É—Ö —Ç–∏–ø—É 'tank' (–Ω–∞–π–±—ñ–ª—å—à–∏–π)
    if (this.game) {
      this.game.createExplosion(enemy.x + enemy.width / 2, enemy.y + enemy.height / 2, 'tank', 25);
    }

    // –ó–Ω–∏—â—É—î–º–æ –∫—É–ª—é
    player.removeBullet(bullet);

    // –ù–∞–Ω–æ—Å–∏–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –≤–æ—Ä–æ–≥—É
    enemy.takeDamage(bullet.damage || 1);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–æ—Ä–æ–≥ –∑–Ω–∏—â–µ–Ω–∏–π
    if (!enemy.isAlive) {
      this.logger.gameEvent('üéØ –í–æ—Ä–æ–≥ –∑–Ω–∏—â–µ–Ω–∏–π –≥—Ä–∞–≤—Ü–µ–º!');
      this.stats.enemyHits++;
    } else {
      this.logger.gameEvent('üí• –í–æ—Ä–æ–≥ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π!');
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–Ω—è –≤–æ—Ä–æ–≥–∞ –ø–æ –≥—Ä–∞–≤—Ü—é
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {Bullet} bullet - –ö—É–ª—è
   */
  handleEnemyHitPlayer(enemy, player, bullet) {
    this.stats.totalCollisions++;
    this.stats.playerHits++;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–±—É—Ö —Ç–∏–ø—É 'armor' (—Å–µ—Ä–µ–¥–Ω—ñ–π)
    if (this.game) {
      this.game.createExplosion(player.x + player.width / 2, player.y + player.height / 2, 'armor', 20);
    }

    // –ó–Ω–∏—â—É—î–º–æ –∫—É–ª—é
    enemy.removeBullet(bullet);

    // –ù–∞–Ω–æ—Å–∏–º–æ –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—é
    player.takeDamage(bullet.damage || 1);

    this.logger.gameEvent('üí• –ì—Ä–∞–≤–µ—Ü—å –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π!');
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–Ω—è –≤–æ—Ä–æ–≥–∞ –ø–æ —à—Ç–∞–±—É
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   * @param {Bullet} bullet - –ö—É–ª—è
   */
  handleEnemyHitBase(enemy, gameField, bullet) {
    this.stats.totalCollisions++;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–±—É—Ö —Ç–∏–ø—É 'tank' (–Ω–∞–π–±—ñ–ª—å—à–∏–π)
    if (this.game) {
      this.game.createExplosion(bullet.x, bullet.y, 'tank', 30);
    }

    // –ó–Ω–∏—â—É—î–º–æ –∫—É–ª—é
    enemy.removeBullet(bullet);

    // –ó–Ω–∏—â—É—î–º–æ —à—Ç–∞–±
    gameField.destroyBase();

    this.logger.gameEvent('üí• –®—Ç–∞–± –∑–Ω–∏—â–µ–Ω–∏–π! –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞!');
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è –∫—É–ª—å –º—ñ–∂ —Å–æ–±–æ—é
   * @param {Bullet} bullet1 - –ü–µ—Ä—à–∞ –∫—É–ª—è
   * @param {Bullet} bullet2 - –î—Ä—É–≥–∞ –∫—É–ª—è
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   */
  handleBulletCollision(bullet1, bullet2, player, enemy) {
    this.stats.bulletCollisions++;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–±—É—Ö —Ç–∏–ø—É 'wall' (–º–∞–ª–∏–π)
    if (this.game) {
      this.game.createExplosion(bullet1.x, bullet1.y, 'wall', 15);
    }

    // –ó–Ω–∏—â—É—î–º–æ –æ–±–∏–¥–≤—ñ –∫—É–ª—ñ
    player.removeBullet(bullet1);
    enemy.removeBullet(bullet2);

    this.logger.gameEvent('üí• –ö—É–ª—ñ –∑—ñ—Ç–∫–Ω—É–ª–∏—Å—è!');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫—É–ª—è –≤–∏–π—à–ª–∞ –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è
   * @param {Bullet} bullet - –ö—É–ª—è
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   * @returns {boolean} - true —è–∫—â–æ –∫—É–ª—è –∑–∞ –º–µ–∂–∞–º–∏
   */
  isBulletOutOfBounds(bullet, gameField) {
    const bounds = gameField.getBounds();
    
    return bullet.x < bounds.minX || 
           bullet.x + bullet.width > bounds.maxX ||
           bullet.y < bounds.minY || 
           bullet.y + bullet.height > bounds.maxY;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–∞–Ω–∫ –≤–∏–π—à–æ–≤ –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è
   * @param {Tank} tank - –¢–∞–Ω–∫
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   * @returns {boolean} - true —è–∫—â–æ —Ç–∞–Ω–∫ –∑–∞ –º–µ–∂–∞–º–∏
   */
  isTankOutOfBounds(tank, gameField) {
    const bounds = gameField.getBounds();
    
    return tank.x < bounds.minX || 
           tank.x + tank.width > bounds.maxX ||
           tank.y < bounds.minY || 
           tank.y + tank.height > bounds.maxY;
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É —Ç–∞–Ω–∫–∞ –∑–∞ –º–µ–∂—ñ –ø–æ–ª—è
   * @param {Tank} tank - –¢–∞–Ω–∫
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   */
  handleTankOutOfBounds(tank, gameField) {
    const bounds = gameField.getBounds();

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–∞–Ω–∫ –≤ –º–µ–∂—ñ –ø–æ–ª—è
    if (tank.x < bounds.minX) tank.x = bounds.minX;
    if (tank.x + tank.width > bounds.maxX) tank.x = bounds.maxX - tank.width;
    if (tank.y < bounds.minY) tank.y = bounds.minY;
    if (tank.y + tank.height > bounds.maxY) tank.y = bounds.maxY - tank.height;

    this.logger.gameEvent('üö´ –¢–∞–Ω–∫ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –º–µ–∂—ñ –ø–æ–ª—è');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ—ó –∫—É–ª—ñ –∑—ñ —à—Ç–∞–±–æ–º
   * @param {Bullet} bullet - –ö—É–ª—è
   * @param {Object} base - –®—Ç–∞–±
   * @returns {boolean} - true —è–∫—â–æ —î –∫–æ–ª—ñ–∑—ñ—è
   */
  checkBulletBaseCollision(bullet, base) {
    const collision =
      bullet.x < base.x + base.width / 2 &&
      bullet.x + bullet.width > base.x - base.width / 2 &&
      bullet.y < base.y + base.height / 2 &&
      bullet.y + bullet.height > base.y - base.height / 2;

    return collision;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–ª—ñ–∑—ñ–π
   * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    return { ...this.stats };
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  resetStats() {
    this.stats = {
      totalCollisions: 0,
      playerHits: 0,
      enemyHits: 0,
      bulletCollisions: 0,
      wallDestructions: 0,
    };
  }
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∫—É–ª—å –∑—ñ —Å—Ç—ñ–Ω–∞–º–∏
   * @param {Player} player - –ì—Ä–∞–≤–µ—Ü—å
   * @param {Enemy} enemy - –í–æ—Ä–æ–≥
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   */
  checkBulletWallCollisions(player, enemy, gameField) {
    const walls = gameField.getWalls();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—É–ª—ñ –≥—Ä–∞–≤—Ü—è
    this.checkBulletsWithWalls(player.getBullets(), walls, player, 'player', gameField);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—É–ª—ñ –≤–æ—Ä–æ–≥–∞
    this.checkBulletsWithWalls(enemy.getBullets(), walls, enemy, 'enemy', gameField);
  }
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∫—É–ª—å –∑—ñ —Å—Ç—ñ–Ω–∞–º–∏
   * @param {Array} bullets - –ú–∞—Å–∏–≤ –∫—É–ª—å
   * @param {Array} walls - –ú–∞—Å–∏–≤ —Å—Ç—ñ–Ω
   * @param {Object} owner - –í–ª–∞—Å–Ω–∏–∫ –∫—É–ª—å
   * @param {string} ownerType - –¢–∏–ø –≤–ª–∞—Å–Ω–∏–∫–∞ ('player' –∞–±–æ 'enemy')
   * @param {GameField} gameField - –Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ
   */
  checkBulletsWithWalls(bullets, walls, owner, ownerType, gameField) {
    for (let i = bullets.length - 1; i >= 0; i--) {
      const bullet = bullets[i];
      
      for (let j = walls.length - 1; j >= 0; j--) {
        const wall = walls[j];
        
        if (this.checkCollision(bullet, wall)) {
          // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∏–ø –≤–∏–±—É—Ö—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—É —Å—Ç—ñ–Ω–∏
          const explosionType = gameField.getWallExplosionType ? 
            gameField.getWallExplosionType(wall) : 'wall';
          
          // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–±—É—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É
          if (this.game) {
            this.game.createExplosion(bullet.x, bullet.y, explosionType, 15);
          }
          
          // –ó–Ω–∏—â—É—î–º–æ –∫—É–ª—é
          owner.removeBullet(bullet);
          
          // –ü–æ—à–∫–æ–¥–∂—É—î–º–æ —Å—Ç—ñ–Ω—É
          if (wall.type !== 'base') {
            const destroyed = gameField.damageWall(wall, 1);
            if (destroyed) {
              this.stats.wallDestructions++;
              // –õ–æ–≥—É—î–º–æ —Ç–∏–ø –∑—Ä—É–π–Ω–æ–≤–∞–Ω–æ—ó —Å—Ç—ñ–Ω–∏
              this.logger.gameEvent(`–°—Ç—ñ–Ω–∞ –∑—Ä—É–π–Ω–æ–≤–∞–Ω–∞: ${wall.material} (${wall.explosionType} –≤–∏–±—É—Ö)`);
            }
          }
          
          // –õ–æ–≥—É—î–º–æ –ø–æ–¥—ñ—é
          this.logger.gameEvent(`–ö—É–ª—è ${ownerType} –∑—ñ—Ç–∫–Ω—É–ª–∞—Å—è –∑—ñ —Å—Ç—ñ–Ω–æ—é (${wall.material}) - —Å—Ç–≤–æ—Ä–µ–Ω–æ ${explosionType} –≤–∏–±—É—Ö`);
          break; // –í–∏—Ö–æ–¥–∏–º–æ –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—è
        }
      }
    }
  }
}
