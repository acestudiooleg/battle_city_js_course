/**
 * üí• –ö–ª–∞—Å Explosion - –∞–Ω—ñ–º–∞—Ü—ñ—è –≤–∏–±—É—Ö—É
 * 
 * –°—Ç–≤–æ—Ä—é—î –µ—Ñ–µ–∫—Ç –≤–∏–±—É—Ö—É –∑ —á–∞—Å—Ç–∏–Ω–∫–∞–º–∏, —è–∫—ñ —Ä–æ–∑–ª—ñ—Ç–∞—é—Ç—å—Å—è –≤ —Ä—ñ–∑–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î 3 —Ç–∏–ø–∏ –≤–∏–±—É—Ö—ñ–≤:
 * - wall: –º–∞–ª–∏–π –≤–∏–±—É—Ö –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ –∑ –¥–µ—Ä–µ–≤—è–Ω–Ω–∏–º–∏ —Å—Ç—ñ–Ω–∞–º–∏ (1 HP)
 * - armor: —Å–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—É—Ö –ø—Ä–∏ –∑—ñ—Ç–∫–Ω–µ–Ω–Ω—ñ –∑ —Ü–µ–≥–ª—è–Ω–∏–º–∏ —Å—Ç—ñ–Ω–∞–º–∏ (3 HP) –∞–±–æ –±—Ä–æ–Ω–µ—é —Ç–∞–Ω–∫–∞
 * - tank: –≤–µ–ª–∏–∫–∏–π –≤–∏–±—É—Ö –ø—Ä–∏ –∑–Ω–∏—â–µ–Ω–Ω—ñ –±–µ—Ç–æ–Ω–Ω–∏—Ö —Å—Ç—ñ–Ω (10 HP) –∞–±–æ —Ç–∞–Ω–∫–∞
 */

export class Explosion {
    constructor(x, y, type = 'wall', size = 20, logger = null) {
        this.x = x;
        this.y = y;
        this.type = type; // 'wall', 'armor', 'tank'
        this.size = this.getSizeByType(type, size);
        this.particles = [];
        this.isActive = true;
        this.duration = this.getDurationByType(type);
        this.age = 0;
        this.logger = logger;
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —á–∞—Å—Ç–∏–Ω–∫–∏ –≤–∏–±—É—Ö—É
        this.createParticles();
        
        if (this.logger) {
            this.logger.gameEvent(`üí• –í–∏–±—É—Ö —Ç–∏–ø—É ${type} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π`, { x, y, size: this.size, type });
        }
        
        console.log(`üí• –í–∏–±—É—Ö —Ç–∏–ø—É ${type} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ –ø–æ–∑–∏—Ü—ñ—ó:`, x, y);
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤–∏–±—É—Ö—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
     */
    getSizeByType(type, baseSize) {
        switch (type) {
            case 'wall':
                return baseSize * 0.8; // –ú–µ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –¥–µ—Ä–µ–≤–∞
            case 'armor':
                return baseSize * 1.2; // –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è —Ü–µ–≥–ª–∏
            case 'tank':
                return baseSize * 1.8; // –ë—ñ–ª—å—à–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –±–µ—Ç–æ–Ω—É
            default:
                return baseSize;
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≤–∏–±—É—Ö—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
     */
    getDurationByType(type) {
        switch (type) {
            case 'wall':
                return 600; // 0.6 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –¥–µ—Ä–µ–≤–∞
            case 'armor':
                return 1000; // 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è —Ü–µ–≥–ª–∏
            case 'tank':
                return 1800; // 1.8 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è –±–µ—Ç–æ–Ω—É
            default:
                return 800;
        }
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–æ–∫ –¥–ª—è –≤–∏–±—É—Ö—É
     */
    createParticles() {
        const particleCount = this.getParticleCountByType();
        const colors = this.getColorsByType();
        
        for (let i = 0; i < particleCount; i++) {
            // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫—É—Ç –¥–ª—è –Ω–∞–ø—Ä—è–º–∫—É —á–∞—Å—Ç–∏–Ω–∫–∏
            const angle = (i / particleCount) * Math.PI * 2;
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
            const speed = this.getSpeedByType();
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä —á–∞—Å—Ç–∏–Ω–∫–∏
            const particleSize = this.getParticleSizeByType();
            
            // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –∫–æ–ª—ñ—Ä
            const color = colors[Math.floor(Math.random() * colors.length)];
            
            this.particles.push({
                x: this.x,
                y: this.y,
                vx: Math.cos(angle) * speed,
                vy: Math.sin(angle) * speed,
                size: particleSize,
                color: color,
                life: 1.0,
                decay: this.getDecayByType()
            });
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞—Å—Ç–∏–Ω–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
     */
    getParticleCountByType() {
        switch (this.type) {
            case 'wall':
                return 8;
            case 'armor':
                return 12;
            case 'tank':
                return 20;
            default:
                return 8;
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
     */
    getColorsByType() {
        switch (this.type) {
            case 'wall':
                return ['#f39c12', '#e67e22', '#f1c40f', '#f7dc6f']; // –ñ–æ–≤—Ç–æ-–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤—ñ –¥–ª—è –¥–µ—Ä–µ–≤–∞
            case 'armor':
                return ['#e74c3c', '#c0392b', '#d35400', '#e67e22', '#f39c12']; // –ß–µ—Ä–≤–æ–Ω–æ-–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤—ñ –¥–ª—è —Ü–µ–≥–ª–∏
            case 'tank':
                return ['#e74c3c', '#c0392b', '#8e44ad', '#2c3e50', '#f39c12', '#f1c40f']; // –†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω—ñ –¥–ª—è –±–µ—Ç–æ–Ω—É
            default:
                return ['#f39c12', '#e67e22', '#e74c3c', '#f1c40f'];
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ —á–∞—Å—Ç–∏–Ω–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
     */
    getSpeedByType() {
        switch (this.type) {
            case 'wall':
                return 1.5 + Math.random() * 2.5; // –ü–æ–≤—ñ–ª—å–Ω—ñ—à–µ –¥–ª—è –¥–µ—Ä–µ–≤–∞
            case 'armor':
                return 2.5 + Math.random() * 3.5; // –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –¥–ª—è —Ü–µ–≥–ª–∏
            case 'tank':
                return 3.5 + Math.random() * 5.5; // –®–≤–∏–¥—à–µ –¥–ª—è –±–µ—Ç–æ–Ω—É
            default:
                return 2 + Math.random() * 3;
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —á–∞—Å—Ç–∏–Ω–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
     */
    getParticleSizeByType() {
        switch (this.type) {
            case 'wall':
                return 2 + Math.random() * 3; // –ú–µ–Ω—à—ñ —á–∞—Å—Ç–∏–Ω–∫–∏ –¥–ª—è –¥–µ—Ä–µ–≤–∞
            case 'armor':
                return 3 + Math.random() * 4; // –°–µ—Ä–µ–¥–Ω—ñ —á–∞—Å—Ç–∏–Ω–∫–∏ –¥–ª—è —Ü–µ–≥–ª–∏
            case 'tank':
                return 4 + Math.random() * 6; // –ë—ñ–ª—å—à—ñ —á–∞—Å—Ç–∏–Ω–∫–∏ –¥–ª—è –±–µ—Ç–æ–Ω—É
            default:
                return 3 + Math.random() * 4;
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–≥–∞—Å–∞–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
     */
    getDecayByType() {
        switch (this.type) {
            case 'wall':
                return 0.025 + Math.random() * 0.035; // –®–≤–∏–¥—à–µ –∑–≥–∞—Å–∞—î –¥–ª—è –¥–µ—Ä–µ–≤–∞
            case 'armor':
                return 0.02 + Math.random() * 0.03; // –°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–≥–∞—Å–∞–Ω–Ω—è –¥–ª—è —Ü–µ–≥–ª–∏
            case 'tank':
                return 0.015 + Math.random() * 0.025; // –ü–æ–≤—ñ–ª—å–Ω—ñ—à–µ –∑–≥–∞—Å–∞—î –¥–ª—è –±–µ—Ç–æ–Ω—É
            default:
                return 0.02 + Math.random() * 0.03;
        }
    }
    
    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–±—É—Ö—É
     */
    update(deltaTime) {
        if (!this.isActive) return;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∂–∏—Ç—Ç—è –≤–∏–±—É—Ö—É
        this.age += deltaTime;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∏–±—É—Ö –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
        if (this.age >= this.duration) {
            this.isActive = false;
            return;
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω—É —á–∞—Å—Ç–∏–Ω–∫—É
        this.particles.forEach(particle => {
            // –†—É—Ö–∞—î–º–æ —á–∞—Å—Ç–∏–Ω–∫—É
            particle.x += particle.vx;
            particle.y += particle.vy;
            
            // –ó–º–µ–Ω—à—É—î–º–æ –∂–∏—Ç—Ç—è —á–∞—Å—Ç–∏–Ω–∫–∏
            particle.life -= particle.decay;
            
            // –ó–º–µ–Ω—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —á–∞—Å—Ç–∏–Ω–∫–∏
            particle.size *= 0.98;
        });
        
        // –í–∏–¥–∞–ª—è—î–º–æ —á–∞—Å—Ç–∏–Ω–∫–∏ –∑ –Ω—É–ª—å–æ–≤–∏–º –∂–∏—Ç—Ç—è–º
        this.particles = this.particles.filter(particle => particle.life > 0);
        
        // –Ø–∫—â–æ –≤—Å—ñ —á–∞—Å—Ç–∏–Ω–∫–∏ –∑–Ω–∏–∫–ª–∏, –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤–∏–±—É—Ö
        if (this.particles.length === 0) {
            this.isActive = false;
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è –≤–∏–±—É—Ö—É
     */
    render(ctx) {
        if (!this.isActive) return;
        
        ctx.save();
        
        // –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –≤–∏–±—É—Ö—É
        this.renderSpecialEffects(ctx);
        
        // –ú–∞–ª—é—î–º–æ –∫–æ–∂–Ω—É —á–∞—Å—Ç–∏–Ω–∫—É
        this.particles.forEach(particle => {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä –∑ –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—é
            const alpha = particle.life;
            ctx.globalAlpha = alpha;
            ctx.fillStyle = particle.color;
            
            // –ú–∞–ª—é—î–º–æ —á–∞—Å—Ç–∏–Ω–∫—É —è–∫ –∫–æ–ª–æ
            ctx.beginPath();
            ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
            ctx.fill();
            
            // –î–æ–¥–∞—î–º–æ —Å–≤—ñ—Ç—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É
            this.addGlowEffect(ctx, particle);
        });
        
        ctx.restore();
    }
    
    /**
     * –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–≤—ñ—Ç—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –≤–∏–±—É—Ö—É
     */
    addGlowEffect(ctx, particle) {
        switch (this.type) {
            case 'wall':
                // –°–ª–∞–±–∫–µ —Å–≤—ñ—Ç—ñ–Ω–Ω—è –¥–ª—è –¥–µ—Ä–µ–≤–∞
                ctx.shadowColor = particle.color;
                ctx.shadowBlur = particle.size * 1.5;
                break;
            case 'armor':
                // –°–µ—Ä–µ–¥–Ω—î —Å–≤—ñ—Ç—ñ–Ω–Ω—è –¥–ª—è —Ü–µ–≥–ª–∏
                ctx.shadowColor = particle.color;
                ctx.shadowBlur = particle.size * 2;
                break;
            case 'tank':
                // –°–∏–ª—å–Ω–µ —Å–≤—ñ—Ç—ñ–Ω–Ω—è –¥–ª—è –±–µ—Ç–æ–Ω—É
                ctx.shadowColor = particle.color;
                ctx.shadowBlur = particle.size * 3;
                break;
        }
        
        // –ú–∞–ª—é—î–º–æ —á–∞—Å—Ç–∏–Ω–∫—É –∑—ñ —Å–≤—ñ—Ç—ñ–Ω–Ω—è–º
        ctx.fill();
        ctx.shadowBlur = 0;
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –≤–∏–±—É—Ö—É
     */
    renderSpecialEffects(ctx) {
        const agePercent = this.age / this.duration;
        
        switch (this.type) {
            case 'wall':
                // –î–µ—Ä–µ–≤'—è–Ω—ñ —Ç—Ä—ñ—Å–∫–∏
                this.renderWoodSplinters(ctx, agePercent);
                break;
            case 'armor':
                // –¶–µ–≥–ª—è–Ω—ñ —É–ª–∞–º–∫–∏
                this.renderBrickDebris(ctx, agePercent);
                break;
            case 'tank':
                // –ë–µ—Ç–æ–Ω–Ω—ñ –æ—Å–∫–æ–ª–∫–∏
                this.renderConcreteShards(ctx, agePercent);
                break;
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è –¥–µ—Ä–µ–≤'—è–Ω–∏—Ö —Ç—Ä—ñ—Å–æ–∫
     */
    renderWoodSplinters(ctx, agePercent) {
        if (agePercent < 0.3) {
            ctx.strokeStyle = '#8B4513';
            ctx.lineWidth = 2;
            ctx.globalAlpha = 1 - agePercent * 3;
            
            for (let i = 0; i < 5; i++) {
                const angle = (i / 5) * Math.PI * 2;
                const length = 15 + Math.random() * 10;
                const x1 = this.x + Math.cos(angle) * 5;
                const y1 = this.y + Math.sin(angle) * 5;
                const x2 = this.x + Math.cos(angle) * length;
                const y2 = this.y + Math.sin(angle) * length;
                
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.stroke();
            }
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ü–µ–≥–ª—è–Ω–∏—Ö —É–ª–∞–º–∫—ñ–≤
     */
    renderBrickDebris(ctx, agePercent) {
        if (agePercent < 0.4) {
            ctx.fillStyle = '#CD5C5C';
            ctx.globalAlpha = 1 - agePercent * 2.5;
            
            for (let i = 0; i < 8; i++) {
                const angle = (i / 8) * Math.PI * 2;
                const distance = 8 + Math.random() * 12;
                const x = this.x + Math.cos(angle) * distance;
                const y = this.y + Math.sin(angle) * distance;
                const size = 3 + Math.random() * 4;
                
                ctx.fillRect(x - size/2, y - size/2, size, size);
            }
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è –±–µ—Ç–æ–Ω–Ω–∏—Ö –æ—Å–∫–æ–ª–∫—ñ–≤
     */
    renderConcreteShards(ctx, agePercent) {
        if (agePercent < 0.5) {
            ctx.fillStyle = '#708090';
            ctx.globalAlpha = 1 - agePercent * 2;
            
            for (let i = 0; i < 12; i++) {
                const angle = (i / 12) * Math.PI * 2;
                const distance = 10 + Math.random() * 20;
                const x = this.x + Math.cos(angle) * distance;
                const y = this.y + Math.sin(angle) * distance;
                const size = 4 + Math.random() * 6;
                
                // –ú–∞–ª—é—î–º–æ —Ç—Ä–∏–∫—É—Ç–Ω—ñ –æ—Å–∫–æ–ª–∫–∏
                ctx.beginPath();
                ctx.moveTo(x, y);
                ctx.lineTo(x + size, y);
                ctx.lineTo(x + size/2, y + size);
                ctx.closePath();
                ctx.fill();
            }
        }
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∏–±—É—Ö –∞–∫—Ç–∏–≤–Ω–∏–π
     */
    isExplosionActive() {
        return this.isActive;
    }
}
