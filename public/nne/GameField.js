import { darkGray, black, red } from './colors.js';

/**
 * üéÆ –ö–ª–∞—Å GameField - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ú–∞–ª—é–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ –ø–æ–ª—è
 * - –§–æ–Ω —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 * - –†–æ–∑–º—ñ—Ç–∫—É –∫–ª—ñ—Ç–∏–Ω–æ–∫
 * - –®—Ç–∞–± (–±–∞–∑—É)
 * - 3 —Ç–∏–ø–∏ —Å—Ç—ñ–Ω –∑ —Ä—ñ–∑–Ω–æ—é –º—ñ—Ü–Ω—ñ—Å—Ç—é:
 *   - –î–µ—Ä–µ–≤–æ (1 HP) - –ª–µ–≥–∫–æ –∑–Ω–∏—â—É—î—Ç—å—Å—è
 *   - –¶–µ–≥–ª–∞ (3 HP) - —Å–µ—Ä–µ–¥–Ω—è –º—ñ—Ü–Ω—ñ—Å—Ç—å
 *   - –ë–µ—Ç–æ–Ω (10 HP) - –¥—É–∂–µ –º—ñ—Ü–Ω–∞
 * - –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –≤–∏–±—É—Ö—ñ–≤ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—É
 */

export class GameField {
    constructor(ctx, config, logger) {
        // –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
        this.ctx = ctx;
        // –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≥—Ä–∏
        this.config = config;
        // —Ä–æ–∑–º—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–∫–∏
        this.tileSize = config.TILE_SIZE;
        // –ª–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –ø–æ–¥—ñ–π
        this.logger = logger;
        
        // –ü–æ–∑–∏—Ü—ñ—è —à—Ç–∞–±—É
        this.base = {
            x: 400, // —Ü–µ–Ω—Ç—Ä –ø–æ–ª—è –ø–æ X
            y: 550, // –≤–Ω–∏–∑—É –ø–æ–ª—è –ø–æ Y
            width: 40,
            height: 40,
            isDestroyed: false
        };
        
        // –ú–∞—Å–∏–≤ —Å—Ç—ñ–Ω —Ç–∞ –ø–µ—Ä–µ—à–∫–æ–¥
        this.walls = [];
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—ñ–Ω–∏
        this.createWalls();
        
        // –∑–∞–ø–∏—Å—É—î–º–æ –≤ –ª–æ–≥
        this.logger.gameEvent('–Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ —Å—Ç–≤–æ—Ä–µ–Ω–µ –∑ 3 —Ç–∏–ø–∞–º–∏ —Å—Ç—ñ–Ω —Ç–∞ –≤–∏–±—É—Ö—ñ–≤');
    }
    
    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     * @param {number} deltaTime - –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    update(deltaTime) {
        // –ü–æ–∫–∏ —â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ
        // –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—è —Ñ–æ–Ω—É
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    render() {
        // –º–∞–ª—é—î–º–æ —Ñ–æ–Ω –ø–æ–ª—è
        this.drawBackground();
        // –º–∞–ª—é—î–º–æ —Å—ñ—Ç–∫—É –ø–æ–ª—è
        this.drawGrid();
        // –º–∞–ª—é—î–º–æ —Å—Ç—ñ–Ω–∏
        this.drawWalls();
        // –º–∞–ª—é—î–º–æ —à—Ç–∞–±
        this.drawBase();
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ñ–æ–Ω—É –ø–æ–ª—è
     */
    drawBackground() {
        // –ú–∞–ª—é—î–º–æ —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π —Ñ–æ–Ω
        // —Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è —Ñ–æ–Ω—É
        this.ctx.fillStyle = black;
        // –∑–∞–ø–æ–≤–Ω—é—î–º–æ –≤–µ—Å—å Canvas
        this.ctx.fillRect(0, 0, this.config.CANVAS_WIDTH, this.config.CANVAS_HEIGHT);
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ –ø–æ–ª—è
     */
    drawGrid() {
        // —Å–≤—ñ—Ç–ª–æ-–∑–µ–ª–µ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –ª—ñ–Ω—ñ–π —Å—ñ—Ç–∫–∏
        this.ctx.strokeStyle = darkGray;
        // —Ç–æ–≤—â–∏–Ω–∞ –ª—ñ–Ω—ñ–π —Å—ñ—Ç–∫–∏
        this.ctx.lineWidth = 1;
        
        // –ø—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ–π —à–∏—Ä–∏–Ω—ñ –∑ –∫—Ä–æ–∫–æ–º tileSize
        for (let x = 0; x <= this.config.CANVAS_WIDTH; x += this.tileSize) {
            // –ø–æ—á–∏–Ω–∞—î–º–æ –º–∞–ª—é–≤–∞—Ç–∏ —à–ª—è—Ö
            this.ctx.beginPath();
            // –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞ (–≤–µ—Ä—Ö)
            this.ctx.moveTo(x, 0);
            // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞ (–Ω–∏–∑)
            this.ctx.lineTo(x, this.config.CANVAS_HEIGHT);
            // –º–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—é
            this.ctx.stroke();
        }
        
        // –ø—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ–π –≤–∏—Å–æ—Ç—ñ –∑ –∫—Ä–æ–∫–æ–º tileSize
        for (let y = 0; y <= this.config.CANVAS_HEIGHT; y += this.tileSize) {
            // –ø–æ—á–∏–Ω–∞—î–º–æ –º–∞–ª—é–≤–∞—Ç–∏ —à–ª—è—Ö
            this.ctx.beginPath();
            // –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞ (–ª—ñ–≤–∞)
            this.ctx.moveTo(0, y);
            // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞ (–ø—Ä–∞–≤–∞)
            this.ctx.lineTo(this.config.CANVAS_WIDTH, y);
            // –º–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—é
            this.ctx.stroke();
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —à—Ç–∞–±—É
     */
    drawBase() {
        if (this.base.isDestroyed) {
            // –ú–∞–ª—é—î–º–æ –∑—Ä—É–π–Ω–æ–≤–∞–Ω–∏–π —à—Ç–∞–±
            this.ctx.fillStyle = '#7f8c8d';
            this.ctx.fillRect(this.base.x - this.base.width / 2, this.base.y - this.base.height / 2, this.base.width, this.base.height);
            
            // –ú–∞–ª—é—î–º–æ —Ö—Ä–µ—Å—Ç
            this.ctx.strokeStyle = '#e74c3c';
            this.ctx.lineWidth = 3;
            this.ctx.beginPath();
            this.ctx.moveTo(this.base.x - this.base.width / 2, this.base.y - this.base.height / 2);
            this.ctx.lineTo(this.base.x + this.base.width / 2, this.base.y + this.base.height / 2);
            this.ctx.moveTo(this.base.x + this.base.width / 2, this.base.y - this.base.height / 2);
            this.ctx.lineTo(this.base.x - this.base.width / 2, this.base.y + this.base.height / 2);
            this.ctx.stroke();
        } else {
            // –ú–∞–ª—é—î–º–æ –∂–∏–≤–∏–π —à—Ç–∞–±
            this.ctx.fillStyle = '#27ae60';
            this.ctx.fillRect(this.base.x - this.base.width / 2, this.base.y - this.base.height / 2, this.base.width, this.base.height);
            
            // –ú–∞–ª—é—î–º–æ –ø—Ä–∞–ø–æ—Ä
            this.ctx.fillStyle = '#e74c3c';
            this.ctx.fillRect(this.base.x - this.base.width / 2 - 5, this.base.y - this.base.height / 2 - 15, 10, 15);
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–∂ –ø–æ–ª—è
     */
    getBounds() {
        return {
            minX: 0,
            maxX: this.config.CANVAS_WIDTH,
            minY: 0,
            maxY: this.config.CANVAS_HEIGHT
        };
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —à—Ç–∞–±—É
     */
    getBase() {
        return this.base;
    }
    
    /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —à—Ç–∞–±—É
     */
    destroyBase() {
        this.base.isDestroyed = true;
        this.logger.gameEvent('–®—Ç–∞–± –∑–Ω–∏—â–µ–Ω–∏–π');
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —à—Ç–∞–± –∑–Ω–∏—â–µ–Ω–∏–π
     */
    isBaseDestroyed() {
        return this.base.isDestroyed;
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω
     */
    createWalls() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—ñ–Ω–∏ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É
        this.createBorderWalls();
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å—Ç—ñ–Ω–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–æ–ª—è
        this.createRandomWalls();
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É –ø–æ–ª—è
     */
    createBorderWalls() {
        const gridWidth = Math.floor(this.config.CANVAS_WIDTH / this.tileSize);
        const gridHeight = Math.floor(this.config.CANVAS_HEIGHT / this.tileSize);
        
        // –í–µ—Ä—Ö–Ω—è —Ç–∞ –Ω–∏–∂–Ω—è —Å—Ç—ñ–Ω–∏
        for (let x = 0; x < gridWidth; x++) {
            this.walls.push({
                x: x * this.tileSize,
                y: 0,
                width: this.tileSize,
                height: this.tileSize,
                type: 'border',
                material: 'concrete', // –ó–∞–ª—ñ–∑–æ–±–µ—Ç–æ–Ω –¥–ª—è —Ä–∞–º–∫–∏
                health: 10,
                maxHealth: 10
            });
            
            this.walls.push({
                x: x * this.tileSize,
                y: (gridHeight - 1) * this.tileSize,
                width: this.tileSize,
                height: this.tileSize,
                type: 'border',
                material: 'concrete', // –ó–∞–ª—ñ–∑–æ–±–µ—Ç–æ–Ω –¥–ª—è —Ä–∞–º–∫–∏
                health: 10,
                maxHealth: 10
            });
        }
        
        // –õ—ñ–≤–∞ —Ç–∞ –ø—Ä–∞–≤–∞ —Å—Ç—ñ–Ω–∏
        for (let y = 1; y < gridHeight - 1; y++) {
            this.walls.push({
                x: 0,
                y: y * this.tileSize,
                width: this.tileSize,
                height: this.tileSize,
                type: 'border',
                material: 'concrete', // –ó–∞–ª—ñ–∑–æ–±–µ—Ç–æ–Ω –¥–ª—è —Ä–∞–º–∫–∏
                health: 10,
                maxHealth: 10
            });
            
            this.walls.push({
                x: (gridWidth - 1) * this.tileSize,
                y: y * this.tileSize,
                width: this.tileSize,
                height: this.tileSize,
                type: 'border',
                material: 'concrete', // –ó–∞–ª—ñ–∑–æ–±–µ—Ç–æ–Ω –¥–ª—è —Ä–∞–º–∫–∏
                health: 10,
                maxHealth: 10
            });
        }
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å—Ç—ñ–Ω –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–æ–ª—è
     */
    createRandomWalls() {
        const gridWidth = Math.floor(this.config.CANVAS_WIDTH / this.tileSize);
        const gridHeight = Math.floor(this.config.CANVAS_HEIGHT / this.tileSize);
        const numberOfWalls = 25; // –ó–±—ñ–ª—å—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—ñ–Ω –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
        
        for (let i = 0; i < numberOfWalls; i++) {
            const x = Math.floor(Math.random() * (gridWidth - 2) + 1) * this.tileSize;
            const y = Math.floor(Math.random() * (gridHeight - 2) + 1) * this.tileSize;
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î–º–æ –±–∞–∑—É –≥—Ä–∞–≤—Ü—è
            if (!this.isPlayerBaseArea(x, y)) {
                // –í–∏–ø–∞–¥–∫–æ–≤–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —Å—Ç—ñ–Ω–∏ –∑ –≤–∞–≥–æ–≤–∏–º–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞–º–∏
                const materials = this.getWeightedMaterials();
                const material = materials[Math.floor(Math.random() * materials.length)];
                
                // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–¥–æ—Ä–æ–≤'—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—É
                let health, maxHealth;
                switch (material) {
                    case 'wood':
                        health = maxHealth = 1;
                        break;
                    case 'brick':
                        health = maxHealth = 3;
                        break;
                    case 'concrete':
                        health = maxHealth = 10;
                        break;
                    default:
                        health = maxHealth = 1;
                }
                
                this.walls.push({
                    x: x,
                    y: y,
                    width: this.tileSize,
                    height: this.tileSize,
                    type: 'obstacle',
                    material: material,
                    health: health,
                    maxHealth: maxHealth,
                    explosionType: this.getExplosionTypeByMaterial(material)
                });
            }
        }
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤ –∑ –≤–∞–≥–æ–≤–∏–º–∏ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞–º–∏
     * –î–µ—Ä–µ–≤–æ - –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ, –±–µ—Ç–æ–Ω - –Ω–∞–π—Ä—ñ–¥—à–µ
     */
    getWeightedMaterials() {
        const materials = [];
        // –î–æ–¥–∞—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–≥–∏
        for (let i = 0; i < 5; i++) materials.push('wood');      // 50% —à–∞–Ω—Å
        for (let i = 0; i < 3; i++) materials.push('brick');     // 30% —à–∞–Ω—Å
        for (let i = 0; i < 2; i++) materials.push('concrete'); // 20% —à–∞–Ω—Å
        return materials;
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—É –≤–∏–±—É—Ö—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—É —Å—Ç—ñ–Ω–∏
     */
    getExplosionTypeByMaterial(material) {
        switch (material) {
            case 'wood':
                return 'wall'; // –ú–∞–ª–∏–π –≤–∏–±—É—Ö –¥–ª—è –¥–µ—Ä–µ–≤–∞
            case 'brick':
                return 'armor'; // –°–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—É—Ö –¥–ª—è —Ü–µ–≥–ª–∏
            case 'concrete':
                return 'tank'; // –í–µ–ª–∏–∫–∏–π –≤–∏–±—É—Ö –¥–ª—è –±–µ—Ç–æ–Ω—É
            default:
                return 'wall';
        }
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ–∑–∏—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∑–æ–Ω—ñ –±–∞–∑–∏ –≥—Ä–∞–≤—Ü—è
     */
    isPlayerBaseArea(x, y) {
        const baseX = Math.floor(this.config.CANVAS_WIDTH / 2);
        const baseY = this.config.CANVAS_HEIGHT - 2 * this.tileSize;
        
        return x === baseX && y === baseY;
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Å—Ç—ñ–Ω
     */
    drawWalls() {
        this.walls.forEach(wall => {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—É —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è
            const color = this.getWallColor(wall);
            this.ctx.fillStyle = color;
            
            // –ú–∞–ª—é—î–º–æ —Å—Ç—ñ–Ω—É
            this.ctx.fillRect(wall.x, wall.y, wall.width, wall.height);
            
            // –ú–∞–ª—é—î–º–æ —Ä–∞–º–∫—É
            this.ctx.strokeStyle = '#2c3e50';
            this.ctx.lineWidth = 1;
            this.ctx.strokeRect(wall.x, wall.y, wall.width, wall.height);
            
            // –ú–∞–ª—é—î–º–æ —Ç–µ–∫—Å—Ç—É—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—É
            this.drawWallTexture(wall);
            
            // –ú–∞–ª—é—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç—ñ–Ω –∑ –±—ñ–ª—å—à–µ –Ω—ñ–∂ 1 –∑–¥–æ—Ä–æ–≤'—è–º
            if (wall.maxHealth > 1) {
                this.drawHealthIndicator(wall);
            }
        });
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Å—Ç—ñ–Ω–∏ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–∞—Ç–µ—Ä—ñ–∞–ª—É —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è
     */
    getWallColor(wall) {
        const healthPercent = wall.health / wall.maxHealth;
        
        switch (wall.material) {
            case 'wood':
                return healthPercent > 0.5 ? '#8B4513' : '#654321'; // –ö–æ—Ä–∏—á–Ω–µ–≤–∏–π
            case 'brick':
                if (healthPercent > 0.66) return '#CD5C5C'; // –ß–µ—Ä–≤–æ–Ω–∞ —Ü–µ–≥–ª–∞
                if (healthPercent > 0.33) return '#B22222'; // –¢–µ–º–Ω–æ-—á–µ—Ä–≤–æ–Ω–∞
                return '#8B0000'; // –î—É–∂–µ —Ç–µ–º–Ω–∞
            case 'concrete':
                if (healthPercent > 0.8) return '#708090'; // –°–≤—ñ—Ç–ª–æ-—Å—ñ—Ä–∏–π
                if (healthPercent > 0.6) return '#696969'; // –°—ñ—Ä–∏–π
                if (healthPercent > 0.4) return '#556B2F'; // –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π
                if (healthPercent > 0.2) return '#2F4F4F'; // –î—É–∂–µ —Ç–µ–º–Ω–∏–π
                return '#191970'; // –¢–µ–º–Ω–æ-—Å–∏–Ω—ñ–π
            default:
                return '#7f8c8d';
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä–∏ —Å—Ç—ñ–Ω–∏
     */
    drawWallTexture(wall) {
        this.ctx.strokeStyle = '#2c3e50';
        this.ctx.lineWidth = 1;
        
        switch (wall.material) {
            case 'wood':
                // –î–µ—Ä–µ–≤'—è–Ω—ñ –∫—ñ–ª—å—Ü—è
                for (let i = 0; i < 3; i++) {
                    const y = wall.y + (i + 1) * (wall.height / 4);
                    this.ctx.beginPath();
                    this.ctx.moveTo(wall.x, y);
                    this.ctx.lineTo(wall.x + wall.width, y);
                    this.ctx.stroke();
                }
                break;
            case 'brick':
                // –¶–µ–≥–ª—è–Ω–∞ –∫–ª–∞–¥–∫–∞
                const brickWidth = wall.width / 4;
                const brickHeight = wall.height / 4;
                for (let row = 0; row < 4; row++) {
                    for (let col = 0; col < 4; col++) {
                        const x = wall.x + col * brickWidth;
                        const y = wall.y + row * brickHeight;
                        this.ctx.strokeRect(x, y, brickWidth, brickHeight);
                    }
                }
                break;
            case 'concrete':
                // –ë–µ—Ç–æ–Ω–Ω–∞ —Ç–µ–∫—Å—Ç—É—Ä–∞
                for (let i = 0; i < 6; i++) {
                    const x = wall.x + (i + 1) * (wall.width / 7);
                    this.ctx.beginPath();
                    this.ctx.moveTo(x, wall.y);
                    this.ctx.lineTo(x, wall.y + wall.height);
                    this.ctx.stroke();
                }
                break;
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤'—è —Å—Ç—ñ–Ω–∏
     */
    drawHealthIndicator(wall) {
        const barWidth = wall.width - 4;
        const barHeight = 4;
        const barX = wall.x + 2;
        const barY = wall.y + wall.height - 6;
        
        // –§–æ–Ω —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        this.ctx.fillStyle = '#2c3e50';
        this.ctx.fillRect(barX, barY, barWidth, barHeight);
        
        // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∑–¥–æ—Ä–æ–≤'—è
        const fillWidth = (wall.health / wall.maxHealth) * barWidth;
        this.ctx.fillStyle = this.getHealthColor(wall.health / wall.maxHealth);
        this.ctx.fillRect(barX, barY, fillWidth, barHeight);
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–¥–æ—Ä–æ–≤'—è
     */
    getHealthColor(healthPercent) {
        if (healthPercent > 0.6) return '#27ae60'; // –ó–µ–ª–µ–Ω–∏–π
        if (healthPercent > 0.3) return '#f39c12'; // –ñ–æ–≤—Ç–∏–π
        return '#e74c3c'; // –ß–µ—Ä–≤–æ–Ω–∏–π
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Å—Ç—ñ–Ω
     */
    getWalls() {
        return this.walls;
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ—ó –∑ —Å—Ç—ñ–Ω–∞–º–∏
     */
    checkCollision(x, y, width, height) {
        return this.walls.some(wall => {
            return x < wall.x + wall.width &&
                   x + width > wall.x &&
                   y < wall.y + wall.height &&
                   y + height > wall.y;
        });
    }
    
    /**
     * –ü–æ—à–∫–æ–¥–∂–µ–Ω–Ω—è —Å—Ç—ñ–Ω–∏
     */
    damageWall(wall, damage = 1) {
        wall.health -= damage;
        
        if (wall.health <= 0) {
            // –í–∏–¥–∞–ª—è—î–º–æ –∑—Ä—É–π–Ω–æ–≤–∞–Ω—É —Å—Ç—ñ–Ω—É
            const index = this.walls.indexOf(wall);
            if (index > -1) {
                this.walls.splice(index, 1);
                this.logger.gameEvent(`–°—Ç—ñ–Ω–∞ –∑—Ä—É–π–Ω–æ–≤–∞–Ω–∞ (${wall.material}) - —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –≤–∏–±—É—Ö —Ç–∏–ø—É ${wall.explosionType}`);
                return true; // –°—Ç—ñ–Ω–∞ –∑—Ä—É–π–Ω–æ–≤–∞–Ω–∞
            }
        } else {
            this.logger.gameEvent(`–°—Ç—ñ–Ω–∞ –ø–æ—à–∫–æ–¥–∂–µ–Ω–∞ (${wall.material}): ${wall.health}/${wall.maxHealth}`);
        }
        
        return false; // –°—Ç—ñ–Ω–∞ –Ω–µ –∑—Ä—É–π–Ω–æ–≤–∞–Ω–∞
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—É –≤–∏–±—É—Ö—É –¥–ª—è —Å—Ç—ñ–Ω–∏
     */
    getWallExplosionType(wall) {
        return wall.explosionType || 'wall';
    }
}