/**
 * üéÆ –ö–ª–∞—Å GameLogger - —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –≥—Ä–∏
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ó–∞–ø–∏—Å –ø–æ–¥—ñ–π –≥—Ä–∏
 * - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
 * - –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 * - –ö–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 * - –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ (2 —Ä–∞–∑–∏ –Ω–∞ —Å–µ–∫—É–Ω–¥—É)
 */

export class GameLogger {
  constructor() {
    // –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥—ñ–≤ –≤ HTML
    this.logContainer = document.getElementById('logContent');
    // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –≤ –ª–æ–∑—ñ
    this.maxEntries = 50;
    
    // –ö–µ—à –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π
    this.eventCache = new Map();
    
    // –ß–µ—Ä–≥–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó
    this.eventQueues = new Map();
    
    // –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
    this.lastRenderTime = 0;
    
    // –Ü–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É (500–º—Å = 2 —Ä–∞–∑–∏ –Ω–∞ —Å–µ–∫—É–Ω–¥—É)
    this.renderInterval = 500;
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥
    this.startPeriodicRender();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
   */
  startPeriodicRender() {
    setInterval(() => {
      this.renderQueuedEvents();
    }, this.renderInterval);
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –≤ —á–µ—Ä–≥—É
   * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {string} details - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ
   */
  addEventToQueue(message, type = 'info', details = '') {
    const eventKey = `${type}:${message}:${details}`;
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–≥—É –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–ø—É –ø–æ–¥—ñ—ó, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    if (!this.eventQueues.has(type)) {
      this.eventQueues.set(type, new Map());
    }
    
    const typeQueue = this.eventQueues.get(type);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î —Ç–∞–∫–∞ –ø–æ–¥—ñ—è –≤ —á–µ—Ä–∑—ñ
    if (typeQueue.has(eventKey)) {
      // –Ø–∫—â–æ —î, –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
      const existingEvent = typeQueue.get(eventKey);
      existingEvent.count++;
      existingEvent.timestamp = Date.now(); // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å
    } else {
      // –Ø–∫—â–æ –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ –Ω–æ–≤—É –ø–æ–¥—ñ—é
      typeQueue.set(eventKey, {
        message,
        type,
        details,
        timestamp: Date.now(),
        count: 1
      });
    }
  }

  /**
   * –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–¥—ñ–π –∑ —á–µ—Ä–≥
   */
  renderQueuedEvents() {
    const now = Date.now();
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö —Ç–∏–ø–∞—Ö –ø–æ–¥—ñ–π
    for (const [type, typeQueue] of this.eventQueues.entries()) {
      // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –ø–æ–¥—ñ—è—Ö —Ü—å–æ–≥–æ —Ç–∏–ø—É
      for (const [eventKey, event] of typeQueue.entries()) {
        // –î–æ–¥–∞—î–º–æ –ø–æ–¥—ñ—é –≤ –ª–æ–≥
        this.addLogEntry(event.message, event.type, event.details, event.count);
        
        // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–¥—ñ—é –∑ —á–µ—Ä–≥–∏
        typeQueue.delete(eventKey);
      }
    }
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥
   * @param {string} message - –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {string} details - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ
   * @param {number} count - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
   */
  addLogEntry(message, type = 'info', details = '', count = 1) {
    // –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
    const timestamp = new Date().toLocaleTimeString();
    // —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç div
    const entry = document.createElement('div');
    // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ CSS –∫–ª–∞—Å
    entry.className = `game_log__entry game_log__entry--${type}`;

    // —Ñ–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —á–∞—Å–æ–º
    let content = `[${timestamp}] ${message}`;
    if (details) {
      // –¥–æ–¥–∞—î–º–æ —ó—Ö –¥–æ —Ç–µ–∫—Å—Ç—É
      content += ` - ${details}`;
    }
    
    // –î–æ–¥–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å, —è–∫—â–æ –±—ñ–ª—å—à–µ 1
    if (count > 1) {
      content += ` (${count} —Ä–∞–∑—ñ–≤)`;
    }

    // –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –µ–ª–µ–º–µ–Ω—Ç–∞
    entry.textContent = content;

    if (!this.logContainer) {
      return;
    }

    // –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ —Å–ø–∏—Å–∫—É
    this.logContainer.insertBefore(entry, this.logContainer.firstChild);

    // –≤–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –∑–∞–ø–∏—Å–∏ (—è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ maxEntries)
    while (this.logContainer.children.length > this.maxEntries) {
      // –≤–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç
      this.logContainer.removeChild(this.logContainer.lastChild);
    }

    // –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –≤–µ—Ä—Ö—É –ª–æ–≥—É
    this.logContainer.scrollTop = 0;
  }

  /**
   * –ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ–¥—ñ—è –≥—Ä–∏
   */
  gameEvent(message, details = '') {
    this.addEventToQueue(message, 'game', details);
  }

  /**
   * –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  info(message, details = '') {
    this.addEventToQueue(message, 'info', details);
  }

  /**
   * –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
   */
  warning(message, details = '') {
    this.addEventToQueue(message, 'warning', details);
  }

  /**
   * –ü–æ–º–∏–ª–∫–∞
   */
  error(message, details = '') {
    this.addEventToQueue(message, 'error', details);
  }

  /**
   * –£—Å–ø—ñ—à–Ω–∞ –¥—ñ—è
   */
  success(message, details = '') {
    this.addEventToQueue(message, 'success', details);
  }

  /**
   * –î—ñ—è –≥—Ä–∞–≤—Ü—è
   */
  playerAction(message, details = '') {
    this.addEventToQueue(message, 'player', details);
  }

  /**
   * –î—ñ—è –≤–æ—Ä–æ–≥–∞
   */
  enemyAction(message, details = '') {
    this.addEventToQueue(message, 'enemy', details);
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—É
   */
  clear() {
    if (this.logContainer) {
      this.logContainer.innerHTML = '';
    }
    // –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ç–∞ —á–µ—Ä–≥–∏
    this.eventCache.clear();
    this.eventQueues.clear();
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
   * @param {number} interval - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  setRenderInterval(interval) {
    this.renderInterval = interval;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–≥
   */
  getQueueStats() {
    const stats = {};
    for (const [type, typeQueue] of this.eventQueues.entries()) {
      stats[type] = typeQueue.size;
    }
    return stats;
  }
}
