/**
 * üìã GameLogger - –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –≥—Ä–∏
 * 
 * –¶–µ–π –∫–ª–∞—Å –∑–∞–º—ñ–Ω—é—î console.log —Ç–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤—Å—ñ –ø–æ–¥—ñ—ó
 * —É –≤—ñ–∫–Ω–æ –ª–æ–≥—ñ–≤ –±—ñ–ª—è –∫–∞–Ω–≤–∞—Å—É
 */

export class GameLogger {
    constructor() {
        this.logContainer = document.getElementById('logContent');
        this.clearButton = document.getElementById('clearLog');
        this.maxEntries = 100; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
        this.entries = [];
        
        this.init();
    }
    
    init() {
        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω–Ω—è
        this.clearButton.addEventListener('click', () => {
            this.clear();
        });
        
        
        this.log('üîß GameLogger —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', 'info');
    }
    
    
    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const entry = {
            message: `[${timestamp}] ${message}`,
            type: type,
            timestamp: Date.now()
        };
        
        this.entries.push(entry);
        
        // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
        if (this.entries.length > this.maxEntries) {
            this.entries.shift();
        }
        
        this.render();
    }
    
    render() {
        if (!this.logContainer) return;
        
        this.logContainer.innerHTML = '';
        
        this.entries.forEach(entry => {
            const logElement = document.createElement('div');
            logElement.className = `log-entry ${entry.type}`;
            logElement.textContent = entry.message;
            this.logContainer.appendChild(logElement);
        });
        
        // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É
        this.logContainer.scrollTop = this.logContainer.scrollHeight;
    }
    
    clear() {
        this.entries = [];
        this.render();
        this.log('üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω–æ', 'info');
    }
    
    // –ó—Ä—É—á–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–¥—ñ–π
    info(message) {
        this.log(message, 'info');
    }
    
    success(message) {
        this.log(message, 'success');
    }
    
    warning(message) {
        this.log(message, 'warning');
    }
    
    error(message) {
        this.log(message, 'error');
    }
    
    debug(message) {
        this.log(message, 'debug');
    }
    
    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —ñ–≥—Ä–æ–≤–∏—Ö –ø–æ–¥—ñ–π
    gameEvent(event, details = '') {
        const message = details ? `${event} - ${details}` : event;
        this.log(`üéÆ ${message}`, 'info');
    }
    
    playerAction(action, details = '') {
        const message = details ? `${action} - ${details}` : action;
        this.log(`üë§ ${message}`, 'success');
    }
    
    enemyAction(action, details = '') {
        const message = details ? `${action} - ${details}` : action;
        this.log(`üëπ ${message}`, 'warning');
    }
    
    collision(object1, object2) {
        this.log(`üí• –ó—ñ—Ç–∫–Ω–µ–Ω–Ω—è: ${object1} ‚Üî ${object2}`, 'warning');
    }
    
    scoreUpdate(points, total) {
        this.log(`üìä –û—á–∫–∏: +${points} (–≤—Å—å–æ–≥–æ: ${total})`, 'success');
    }
} 