/**
 * üéÆ –ö–ª–∞—Å GameField - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ú–∞–ª—é–≤–∞–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
 * - –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—ñ—Ç–∫–∏
 * - –†–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å—Ç—ñ–Ω —Ç–∞ –ø–µ—Ä–µ—à–∫–æ–¥
 */

import { logger } from './main.js';

export class GameField {
    constructor(ctx, config) {
        this.ctx = ctx;
        this.config = config;
        
        // –†–æ–∑–º—ñ—Ä–∏ –ø–æ–ª—è –≤ –∫–ª—ñ—Ç–∏–Ω–∫–∞—Ö
        this.gridWidth = Math.floor(config.CANVAS_WIDTH / config.TILE_SIZE);
        this.gridHeight = Math.floor(config.CANVAS_HEIGHT / config.TILE_SIZE);
        
        // –ú–∞—Å–∏–≤ —Å—Ç—ñ–Ω
        this.walls = [];
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—ñ–Ω–∏
        this.createWalls();
        
        logger.gameEvent('–Ü–≥—Ä–æ–≤–µ –ø–æ–ª–µ —Å—Ç–≤–æ—Ä–µ–Ω–µ', `${this.gridWidth} x ${this.gridHeight} –∫–ª—ñ—Ç–∏–Ω–æ–∫`);
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ
     */
    createWalls() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—ñ–Ω–∏ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É
        this.createBorderWalls();
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Å—Ç—ñ–Ω–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–æ–ª—è
        this.createRandomWalls();
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑—É –≥—Ä–∞–≤—Ü—è
        this.createPlayerBase();
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É –ø–æ–ª—è
     */
    createBorderWalls() {
        // –í–µ—Ä—Ö–Ω—è —Ç–∞ –Ω–∏–∂–Ω—è —Å—Ç—ñ–Ω–∏
        for (let x = 0; x < this.gridWidth; x++) {
            this.walls.push({
                x: x * this.config.TILE_SIZE,
                y: 0,
                width: this.config.TILE_SIZE,
                height: this.config.TILE_SIZE,
                type: 'border'
            });
            
            this.walls.push({
                x: x * this.config.TILE_SIZE,
                y: (this.gridHeight - 1) * this.config.TILE_SIZE,
                width: this.config.TILE_SIZE,
                height: this.config.TILE_SIZE,
                type: 'border'
            });
        }
        
        // –õ—ñ–≤–∞ —Ç–∞ –ø—Ä–∞–≤–∞ —Å—Ç—ñ–Ω–∏
        for (let y = 1; y < this.gridHeight - 1; y++) {
            this.walls.push({
                x: 0,
                y: y * this.config.TILE_SIZE,
                width: this.config.TILE_SIZE,
                height: this.config.TILE_SIZE,
                type: 'border'
            });
            
            this.walls.push({
                x: (this.gridWidth - 1) * this.config.TILE_SIZE,
                y: y * this.config.TILE_SIZE,
                width: this.config.TILE_SIZE,
                height: this.config.TILE_SIZE,
                type: 'border'
            });
        }
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å—Ç—ñ–Ω –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –ø–æ–ª—è
     */
    createRandomWalls() {
        const numberOfWalls = 15; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å—Ç—ñ–Ω
        
        for (let i = 0; i < numberOfWalls; i++) {
            const x = Math.floor(Math.random() * (this.gridWidth - 2) + 1) * this.config.TILE_SIZE;
            const y = Math.floor(Math.random() * (this.gridHeight - 2) + 1) * this.config.TILE_SIZE;
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—î–º–æ –±–∞–∑—É –≥—Ä–∞–≤—Ü—è
            if (!this.isPlayerBaseArea(x, y)) {
                this.walls.push({
                    x: x,
                    y: y,
                    width: this.config.TILE_SIZE,
                    height: this.config.TILE_SIZE,
                    type: 'obstacle'
                });
            }
        }
    }
    
    /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –≥—Ä–∞–≤—Ü—è
     */
    createPlayerBase() {
        const baseX = Math.floor(this.gridWidth / 2) * this.config.TILE_SIZE;
        const baseY = (this.gridHeight - 2) * this.config.TILE_SIZE;
        
        this.walls.push({
            x: baseX,
            y: baseY,
            width: this.config.TILE_SIZE,
            height: this.config.TILE_SIZE,
            type: 'base'
        });
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ–∑–∏—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∑–æ–Ω—ñ –±–∞–∑–∏ –≥—Ä–∞–≤—Ü—è
     */
    isPlayerBaseArea(x, y) {
        const baseX = Math.floor(this.gridWidth / 2) * this.config.TILE_SIZE;
        const baseY = (this.gridHeight - 2) * this.config.TILE_SIZE;
        
        return x === baseX && y === baseY;
    }
    
    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     * –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–∂–µ–Ω –∫–∞–¥—Ä
     */
    update(deltaTime) {
        // –ü–æ–∫–∏ —â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –æ–Ω–æ–≤–ª—é—î–º–æ
        // –í –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —É—Ä–æ–∫–∞—Ö —Ç—É—Ç –º–æ–∂–µ –±—É—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—è
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    render() {
        // –ú–∞–ª—é—î–º–æ —Å—ñ—Ç–∫—É
        this.drawGrid();
        
        // –ú–∞–ª—é—î–º–æ —Å—Ç—ñ–Ω–∏
        this.drawWalls();
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Å—ñ—Ç–∫–∏ –Ω–∞ —ñ–≥—Ä–æ–≤–æ–º—É –ø–æ–ª—ñ
     */
    drawGrid() {
        this.ctx.strokeStyle = '#34495e';
        this.ctx.lineWidth = 1;
        
        // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó
        for (let x = 0; x <= this.config.CANVAS_WIDTH; x += this.config.TILE_SIZE) {
            this.ctx.beginPath();
            this.ctx.moveTo(x, 0);
            this.ctx.lineTo(x, this.config.CANVAS_HEIGHT);
            this.ctx.stroke();
        }
        
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ñ –ª—ñ–Ω—ñ—ó
        for (let y = 0; y <= this.config.CANVAS_HEIGHT; y += this.config.TILE_SIZE) {
            this.ctx.beginPath();
            this.ctx.moveTo(0, y);
            this.ctx.lineTo(this.config.CANVAS_WIDTH, y);
            this.ctx.stroke();
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Å—Ç—ñ–Ω
     */
    drawWalls() {
        this.walls.forEach(wall => {
            switch (wall.type) {
                case 'border':
                    this.ctx.fillStyle = '#34495e'; // –°—ñ—Ä–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è —Ä–∞–º–∫–∏
                    break;
                case 'obstacle':
                    this.ctx.fillStyle = '#7f8c8d'; // –¢–µ–º–Ω–æ-—Å—ñ—Ä–∏–π –¥–ª—è –ø–µ—Ä–µ—à–∫–æ–¥
                    break;
                case 'base':
                    this.ctx.fillStyle = '#27ae60'; // –ó–µ–ª–µ–Ω–∏–π –¥–ª—è –±–∞–∑–∏
                    break;
                default:
                    this.ctx.fillStyle = '#95a5a6';
            }
            
            this.ctx.fillRect(wall.x, wall.y, wall.width, wall.height);
            
            // –ú–∞–ª—é—î–º–æ —Ä–∞–º–∫—É –Ω–∞–≤–∫–æ–ª–æ —Å—Ç—ñ–Ω–∏
            this.ctx.strokeStyle = '#2c3e50';
            this.ctx.lineWidth = 1;
            this.ctx.strokeRect(wall.x, wall.y, wall.width, wall.height);
        });
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å—Ç—ñ–Ω
     * @returns {Array} - –ú–∞—Å–∏–≤ —Å—Ç—ñ–Ω
     */
    getWalls() {
        return this.walls;
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ—ó –∑ —Å—Ç—ñ–Ω–∞–º–∏
     * @param {number} x - X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} width - –®–∏—Ä–∏–Ω–∞ –æ–±'—î–∫—Ç–∞
     * @param {number} height - –í–∏—Å–æ—Ç–∞ –æ–±'—î–∫—Ç–∞
     * @returns {boolean} - true —è–∫—â–æ —î –∫–æ–ª—ñ–∑—ñ—è
     */
    checkCollision(x, y, width, height) {
        return this.walls.some(wall => {
            return x < wall.x + wall.width &&
                   x + width > wall.x &&
                   y < wall.y + wall.height &&
                   y + height > wall.y;
        });
    }
} 