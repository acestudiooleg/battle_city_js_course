/**
 * üéÆ –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å Tank - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î —Ç–∞–Ω–∫
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞–Ω–∫–∞
 * - –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ç–∞–Ω–∫–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
 * - –ë–∞–∑–æ–≤—É –ª–æ–≥—ñ–∫—É —Ç–∞–Ω–∫–∞
 */

import { logger } from './main.js';

export class Tank {
    constructor(options = {}) {
        // –ü–æ–∑–∏—Ü—ñ—è —Ç–∞–Ω–∫–∞
        this.x = options.x || 0;
        this.y = options.y || 0;
        
        // –†–æ–∑–º—ñ—Ä —Ç–∞–Ω–∫–∞
        this.width = options.size || 32;
        this.height = options.size || 32;
        
        // –í—ñ–∑—É–∞–ª—å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
        this.color = options.color || '#95a5a6';
        
        // –ù–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
        this.direction = options.direction || 'up';
        
        // –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É
        this.speed = options.speed || 1;
        
        // –°—Ç–∞–Ω —Ç–∞–Ω–∫–∞
        this.isAlive = true;
        
        logger.debug('–¢–∞–Ω–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π');
    }
    
    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Ç–∞–Ω–∫–∞
     * –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–∂–µ–Ω –∫–∞–¥—Ä
     */
    update(deltaTime) {
        // –ë–∞–∑–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        // –ë—É–¥–µ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–∞ –≤ –¥–æ—á—ñ—Ä–Ω—ñ—Ö –∫–ª–∞—Å–∞—Ö
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è —Ç–∞–Ω–∫–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
     * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
     */
    render(ctx) {
        if (!this.isAlive) return;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        ctx.save();
        
        // –ú–∞–ª—é—î–º–æ —Ç—ñ–ª–æ —Ç–∞–Ω–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç)
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // –ú–∞–ª—é—î–º–æ —Ä–∞–º–∫—É –Ω–∞–≤–∫–æ–ª–æ —Ç–∞–Ω–∫–∞
        ctx.strokeStyle = '#000000';
        ctx.lineWidth = 2;
        ctx.strokeRect(this.x, this.y, this.width, this.height);
        
        // –ú–∞–ª—é—î–º–æ –¥—É–ª–æ —Ç–∞–Ω–∫–∞
        this.drawGun(ctx);
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        ctx.restore();
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è –¥—É–ª–∞ —Ç–∞–Ω–∫–∞
     * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
     */
    drawGun(ctx) {
        const gunWidth = 4;
        const gunHeight = 8;
        
        // –ü–æ–∑–∏—Ü—ñ—è –¥—É–ª–∞ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω–∞–ø—Ä—è–º–∫—É
        let gunX, gunY;
        
        switch (this.direction) {
            case 'up':
                gunX = this.x + this.width / 2 - gunWidth / 2;
                gunY = this.y - gunHeight;
                break;
            case 'down':
                gunX = this.x + this.width / 2 - gunWidth / 2;
                gunY = this.y + this.height;
                break;
            case 'left':
                gunX = this.x - gunHeight;
                gunY = this.y + this.height / 2 - gunWidth / 2;
                break;
            case 'right':
                gunX = this.x + this.width;
                gunY = this.y + this.height / 2 - gunWidth / 2;
                break;
        }
        
        // –ú–∞–ª—é—î–º–æ –¥—É–ª–æ
        ctx.fillStyle = '#aaaa00';
        if (this.direction === 'left' || this.direction === 'right') {
            ctx.fillRect(gunX, gunY, gunHeight, gunWidth);
        } else {
            ctx.fillRect(gunX, gunY, gunWidth, gunHeight);
        }
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ç–∞–Ω–∫–∞
     * @param {number} x - –ù–æ–≤–∞ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - –ù–æ–≤–∞ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     */
    setPosition(x, y) {
        this.x = x;
        this.y = y;
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É —Ç–∞–Ω–∫–∞
     * @param {string} direction - –ù–∞–ø—Ä—è–º–æ–∫ ('up', 'down', 'left', 'right')
     */
    setDirection(direction) {
        this.direction = direction;
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–∞–Ω–∫ –∂–∏–≤–∏–π
     * @returns {boolean} - true —è–∫—â–æ —Ç–∞–Ω–∫ –∂–∏–≤–∏–π
     */
    isTankAlive() {
        return this.isAlive;
    }
    
    /**
     * –í–±–∏—Ç–∏ —Ç–∞–Ω–∫
     */
    kill() {
        this.isAlive = false;
        logger.debug('–¢–∞–Ω–∫ –≤–±–∏—Ç–∏–π!');
    }
    
    /**
     * –í—ñ–¥—Ä–æ–¥–∏—Ç–∏ —Ç–∞–Ω–∫
     */
    respawn() {
        this.isAlive = true;
        logger.debug('–¢–∞–Ω–∫ –≤—ñ–¥—Ä–æ–¥–∂–µ–Ω–∏–π!');
    }
} 