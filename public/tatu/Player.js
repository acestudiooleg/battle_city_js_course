/**
 * üéÆ –ö–ª–∞—Å Player - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –≥—Ä–∞–≤—Ü—è
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –≥—Ä–∞–≤—Ü—è
 * - –ú–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
 * - –ë–∞–∑–æ–≤—É –ª–æ–≥—ñ–∫—É –≥—Ä–∞–≤—Ü—è
 */

import { Bullet } from './Bullet.js';

export class Player {
    constructor(options = {}) {
        // –ü–æ–∑–∏—Ü—ñ—è –≥—Ä–∞–≤—Ü—è
        this.x = options.x || 0;
        this.y = options.y || 0;
        
        // –†–æ–∑–º—ñ—Ä –≥—Ä–∞–≤—Ü—è
        this.width = options.size || 32;
        this.height = options.size || 32;
        
        // –í—ñ–∑—É–∞–ª—å–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
        this.color = options.color || '#f1c40f'; // –ñ–æ–≤—Ç–∏–π –∫–æ–ª—ñ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        
        // –ù–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
        this.direction = 'up';
        
        // –®–≤–∏–¥–∫—ñ—Å—Ç—å —Ä—É—Ö—É
        this.speed = 2;
        
        // –°—Ç–∞–Ω –≥—Ä–∞–≤—Ü—è
        this.isAlive = true;
        
        this.bullets = [];
        this.lastShotTime = 0;
        this.shootCooldown = 300; // –º—Å –º—ñ–∂ –ø–æ—Å—Ç—Ä—ñ–ª–∞–º–∏
        
        console.log('üë§ –ì—Ä–∞–≤–µ—Ü—å —Å—Ç–≤–æ—Ä–µ–Ω–∏–π:', this);
    }
    
    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è: —Ä—É—Ö, —Å—Ç—Ä—ñ–ª—å–±–∞, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É–ª—å
     */
    update(deltaTime, inputManager, gameField) {
        if (!this.isAlive) return;
        // –†—É—Ö
        let moved = false;
        let newX = this.x;
        let newY = this.y;
        let newDir = this.direction;
        if (inputManager.isMoveUp()) {
            newY -= this.speed;
            newDir = 'up';
            moved = true;
        } else if (inputManager.isMoveDown()) {
            newY += this.speed;
            newDir = 'down';
            moved = true;
        } else if (inputManager.isMoveLeft()) {
            newX -= this.speed;
            newDir = 'left';
            moved = true;
        } else if (inputManager.isMoveRight()) {
            newX += this.speed;
            newDir = 'right';
            moved = true;
        }
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ–π –∑—ñ —Å—Ç—ñ–Ω–∞–º–∏
        if (moved && !gameField.checkCollision(newX, newY, this.width, this.height)) {
            this.x = newX;
            this.y = newY;
        }
        this.direction = newDir;
        // –°—Ç—Ä—ñ–ª—å–±–∞
        if (inputManager.isShooting()) {
            this.shoot();
        }
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É–ª—å
        this.bullets.forEach(bullet => bullet.update(deltaTime));
        // –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É–ª—å
        this.bullets = this.bullets.filter(bullet => bullet.isActive && !bullet.isOutOfBounds(gameField.config.CANVAS_WIDTH, gameField.config.CANVAS_HEIGHT));
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è –≥—Ä–∞–≤—Ü—è –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
     * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
     */
    render(ctx) {
        if (!this.isAlive) return;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        ctx.save();
        
        // –ú–∞–ª—é—î–º–æ —Ç—ñ–ª–æ —Ç–∞–Ω–∫–∞ (–æ—Å–Ω–æ–≤–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç)
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // –ú–∞–ª—é—î–º–æ —Ä–∞–º–∫—É –Ω–∞–≤–∫–æ–ª–æ —Ç–∞–Ω–∫–∞
        ctx.strokeStyle = '#000';
        ctx.lineWidth = 2;
        ctx.strokeRect(this.x, this.y, this.width, this.height);
        
        // –ú–∞–ª—é—î–º–æ –¥—É–ª–æ —Ç–∞–Ω–∫–∞ (–º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫)
        this.drawGun(ctx);
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        ctx.restore();
        
        // –ú–∞–ª—é—î–º–æ –∫—É–ª—ñ
        this.bullets.forEach(bullet => bullet.render(ctx));
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è –¥—É–ª–∞ —Ç–∞–Ω–∫–∞
     * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
     */
    drawGun(ctx) {
        const gunWidth = 4;
        const gunHeight = 8;
        
        // –ü–æ–∑–∏—Ü—ñ—è –¥—É–ª–∞ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω–∞–ø—Ä—è–º–∫—É
        let gunX, gunY;
        
        switch (this.direction) {
            case 'up':
                gunX = this.x + this.width / 2 - gunWidth / 2;
                gunY = this.y - gunHeight;
                break;
            case 'down':
                gunX = this.x + this.width / 2 - gunWidth / 2;
                gunY = this.y + this.height;
                break;
            case 'left':
                gunX = this.x - gunHeight;
                gunY = this.y + this.height / 2 - gunWidth / 2;
                break;
            case 'right':
                gunX = this.x + this.width;
                gunY = this.y + this.height / 2 - gunWidth / 2;
                break;
        }
        
        // –ú–∞–ª—é—î–º–æ –¥—É–ª–æ
        ctx.fillStyle = '#000';
        if (this.direction === 'left' || this.direction === 'right') {
            ctx.fillRect(gunX, gunY, gunHeight, gunWidth);
        } else {
            ctx.fillRect(gunX, gunY, gunWidth, gunHeight);
        }
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –≥—Ä–∞–≤—Ü—è
     * @param {number} x - –ù–æ–≤–∞ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - –ù–æ–≤–∞ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     */
    setPosition(x, y) {
        this.x = x;
        this.y = y;
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É –≥—Ä–∞–≤—Ü—è
     * @param {string} direction - –ù–∞–ø—Ä—è–º–æ–∫ ('up', 'down', 'left', 'right')
     */
    setDirection(direction) {
        this.direction = direction;
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≥—Ä–∞–≤–µ—Ü—å –∂–∏–≤–∏–π
     * @returns {boolean} - true —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –∂–∏–≤–∏–π
     */
    isPlayerAlive() {
        return this.isAlive;
    }
    
    /**
     * –í–±–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è
     */
    kill() {
        this.isAlive = false;
        console.log('üíÄ –ì—Ä–∞–≤–µ—Ü—å –≤–±–∏—Ç–∏–π!');
    }
    
    /**
     * –í—ñ–¥—Ä–æ–¥–∏—Ç–∏ –≥—Ä–∞–≤—Ü—è
     */
    respawn() {
        this.isAlive = true;
        console.log('üîÑ –ì—Ä–∞–≤–µ—Ü—å –≤—ñ–¥—Ä–æ–¥–∂–µ–Ω–∏–π!');
    }
    
    /**
     * –°—Ç—Ä—ñ–ª—å–±–∞ (—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É–ª—ñ)
     */
    shoot() {
        const now = Date.now();
        if (now - this.lastShotTime < this.shootCooldown) return;
        this.lastShotTime = now;
        // –¶–µ–Ω—Ç—Ä –¥—É–ª–∞
        let bx = this.x + this.width / 2 - 2;
        let by = this.y + this.height / 2 - 2;
        switch (this.direction) {
            case 'up': by = this.y - 4; break;
            case 'down': by = this.y + this.height; break;
            case 'left': bx = this.x - 4; break;
            case 'right': bx = this.x + this.width; break;
        }
        this.bullets.push(new Bullet({
            x: bx,
            y: by,
            direction: this.direction,
            owner: 'player',
            speed: 6
        }));
    }
} 