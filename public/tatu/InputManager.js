export class InputManager {
  constructor(logger) {
    // –°—Ç–∞–Ω –∫–ª–∞–≤—ñ—à (–Ω–∞—Ç–∏—Å–Ω—É—Ç—ñ/–Ω–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç—ñ)
    this.keys = {};

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    this.controls = {
      // –†—É—Ö
      UP: ['KeyW', 'ArrowUp'],
      DOWN: ['KeyS', 'ArrowDown'],
      LEFT: ['KeyA', 'ArrowLeft'],
      RIGHT: ['KeyD', 'ArrowRight'],

      // –î—ñ—ó
      SHOOT: ['Space'],
      PAUSE: ['KeyP'],

      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–ª–∞–≤—ñ—à—ñ
      RESTART: ['KeyR'],
      DEBUG: ['F12'],
    };

    // –°—Ç–∞–Ω –≥—Ä–∏
    this.gameState = {
      isPaused: false,
      isGameOver: false,
    };

    // –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å—É –ø–æ–¥—ñ–π
    this.logger = logger;

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.initEventListeners();

    this.logger.gameEvent('–°–∏—Å—Ç–µ–º–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  initEventListeners() {
    // –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à
    document.addEventListener('keydown', (event) => {
      this.handleKeyDown(event);
    });

    // –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à
    document.addEventListener('keyup', (event) => {
      this.handleKeyUp(event);
    });

    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–º –¥—ñ—è–º –±—Ä–∞—É–∑–µ—Ä–∞
    document.addEventListener('keydown', (event) => {
      if (this.isGameKey(event.code)) {
        event.preventDefault();
      }
    });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ
   * @param {KeyboardEvent} event - –ü–æ–¥—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
   */
  handleKeyDown(event) {
    const keyCode = event.code;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–ª–∞–≤—ñ—à—ñ —è–∫ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É
    this.keys[keyCode] = true;

    // –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–ª–∞–≤—ñ—à—ñ
    this.handleSpecialKeys(keyCode);

    this.logger.gameEvent(`‚å®Ô∏è –ö–ª–∞–≤—ñ—à–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞: ${keyCode}`);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ
   * @param {KeyboardEvent} event - –ü–æ–¥—ñ—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
   */
  handleKeyUp(event) {
    const keyCode = event.code;

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–ª–∞–≤—ñ—à—ñ —è–∫ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç—É
    this.keys[keyCode] = false;

    this.logger.gameEvent(`‚å®Ô∏è –ö–ª–∞–≤—ñ—à–∞ –≤—ñ–¥–ø—É—â–µ–Ω–∞: ${keyCode}`);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –∫–ª–∞–≤—ñ—à
   * @param {string} keyCode - –ö–æ–¥ –∫–ª–∞–≤—ñ—à—ñ
   */
  handleSpecialKeys(keyCode) {
    // –ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≥—Ä–∏
    if (this.controls.PAUSE.includes(keyCode)) {
      this.togglePause();
    }

    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥—Ä–∏
    if (this.controls.RESTART.includes(keyCode)) {
      this.restartGame();
    }

    // –†–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    if (this.controls.DEBUG.includes(keyCode)) {
      this.toggleDebug();
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–ª–∞–≤—ñ—à–∞
   * @param {string} action - –î—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   * @returns {boolean} - true —è–∫—â–æ –∫–ª–∞–≤—ñ—à–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞
   */
  isKeyPressed(action) {
    const keys = this.controls[action];
    if (!keys) return false;

    return keys.some((key) => this.keys[key]);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É —Ä—É—Ö—É
   * @returns {Object} - –û–±'—î–∫—Ç –∑ –Ω–∞–ø—Ä—è–º–∫–∞–º–∏
   */
  getMovementDirection() {
    return {
      up: this.isKeyPressed('UP'),
      down: this.isKeyPressed('DOWN'),
      left: this.isKeyPressed('LEFT'),
      right: this.isKeyPressed('RIGHT'),
    };
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–ª–∞–≤—ñ—à–∞ —Å—Ç—Ä—ñ–ª—å–±–∏
   * @returns {boolean} - true —è–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞
   */
  isShootPressed() {
    return this.isKeyPressed('SHOOT');
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø–∞—É–∑–∏
   */
  togglePause() {
    this.gameState.isPaused = !this.gameState.isPaused;
    this.logger.gameEvent(
      `‚è∏Ô∏è –ü–∞—É–∑–∞: ${this.gameState.isPaused ? '—É–≤—ñ–º–∫–Ω–µ–Ω–∞' : '–≤–∏–º–∫–Ω–µ–Ω–∞'}`
    );

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é –ø–∞—É–∑–∏
    this.emitPauseEvent();
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥—Ä–∏
   */
  restartGame() {
    this.logger.gameEvent('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥—Ä–∏');

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    this.emitRestartEvent();
  }

  /**
   * –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
   */
  toggleDebug() {
    this.logger.gameEvent('üêõ –†–µ–∂–∏–º –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–º–∏–∫–∞—î—Ç—å—Å—è');

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ø–æ–¥—ñ—é –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
    this.emitDebugEvent();
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ü–µ —ñ–≥—Ä–æ–≤–∞ –∫–ª–∞–≤—ñ—à–∞
   * @param {string} keyCode - –ö–æ–¥ –∫–ª–∞–≤—ñ—à—ñ
   * @returns {boolean} - true —è–∫—â–æ —ñ–≥—Ä–æ–≤–∞ –∫–ª–∞–≤—ñ—à–∞
   */
  isGameKey(keyCode) {
    const allKeys = Object.values(this.controls).flat();
    return allKeys.includes(keyCode);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏
   * @returns {Object} - –°—Ç–∞–Ω –≥—Ä–∏
   */
  getGameState() {
    return { ...this.gameState };
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏
   * @param {Object} state - –ù–æ–≤–∏–π —Å—Ç–∞–Ω
   */
  setGameState(state) {
    this.gameState = { ...this.gameState, ...state };
  }

  /**
   * –í–∏–∫–ª–∏–∫ –ø–æ–¥—ñ—ó –ø–∞—É–∑–∏
   */
  emitPauseEvent() {
    const event = new CustomEvent('gamePause', {
      detail: { isPaused: this.gameState.isPaused },
    });
    document.dispatchEvent(event);
  }

  /**
   * –í–∏–∫–ª–∏–∫ –ø–æ–¥—ñ—ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
   */
  emitRestartEvent() {
    const event = new CustomEvent('gameRestart');
    document.dispatchEvent(event);
  }

  /**
   * –í–∏–∫–ª–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
   */
  emitDebugEvent() {
    const event = new CustomEvent('gameDebug');
    document.dispatchEvent(event);
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–ª–∞–≤—ñ—à
   */
  clearKeys() {
    this.keys = {};
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
   * @returns {Object} - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
   */
  getControlsInfo() {
    return {
      movement: 'WASD –∞–±–æ —Å—Ç—Ä—ñ–ª–∫–∏',
      shoot: '–ü—Ä–æ–±—ñ–ª',
      pause: 'P',
      restart: 'R',
      debug: 'F12',
    };
  }
}
