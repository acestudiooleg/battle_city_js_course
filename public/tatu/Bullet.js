import { orange, red, white } from './colors.js';

/**
 * üéÆ –ö–ª–∞—Å Bullet - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –∫—É–ª—é
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫—É–ª—ñ
 * - –†—É—Ö –∫—É–ª—ñ –≤ –∑–∞–¥–∞–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
 * - –ú–∞–ª—é–≤–∞–Ω–Ω—è –∫—É–ª—ñ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
 * - –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–æ–ª—ñ–∑—ñ–π
 */

export class Bullet {
    constructor(options = {}) {
        // –ü–æ–∑–∏—Ü—ñ—è –∫—É–ª—ñ
        this.x = options.x || 0;
        this.y = options.y || 0;
        
        // –†–æ–∑–º—ñ—Ä –∫—É–ª—ñ
        this.width = options.width || 4;
        this.height = options.height || 4;
        
        // –ù–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
        this.direction = options.direction || 'up';
        
        // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∫—É–ª—ñ
        this.speed = options.speed || 5;
        
        // –í–ª–∞—Å–Ω–∏–∫ –∫—É–ª—ñ ('player' –∞–±–æ 'enemy')
        this.owner = options.owner || 'player';
        
        // –ö–æ–ª—ñ—Ä –∫—É–ª—ñ
        this.color = this.owner === 'player' ? orange : red;
        
        // –°—Ç–∞–Ω –∫—É–ª—ñ
        this.isActive = true;
        
        // –ß–∞—Å –∂–∏—Ç—Ç—è –∫—É–ª—ñ (–≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö)
        this.lifetime = 3000; // 3 —Å–µ–∫—É–Ω–¥–∏
        this.age = 0;
        
        console.log('üí• –ö—É–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–∞:', this);
    }
    
    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫—É–ª—ñ
     * –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–∂–µ–Ω –∫–∞–¥—Ä
     */
    update(deltaTime) {
        if (!this.isActive) return;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∂–∏—Ç—Ç—è
        this.age += deltaTime;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫—É–ª—è –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞
        if (this.age >= this.lifetime) {
            this.destroy();
            return;
        }
        
        // –†—É—Ö–∞—î–º–æ –∫—É–ª—é
        this.move();
    }
    
    /**
     * –†—É—Ö –∫—É–ª—ñ –≤ –∑–∞–¥–∞–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
     */
    move() {
        switch (this.direction) {
            case 'up':
                this.y -= this.speed;
                break;
            case 'down':
                this.y += this.speed;
                break;
            case 'left':
                this.x -= this.speed;
                break;
            case 'right':
                this.x += this.speed;
                break;
        }
    }
    
    /**
     * –ú–∞–ª—é–≤–∞–Ω–Ω—è –∫—É–ª—ñ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
     * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
     */
    render(ctx) {
        if (!this.isActive) return;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        ctx.save();
        
        // –ú–∞–ª—é—î–º–æ –∫—É–ª—é —è–∫ –º–∞–ª–µ–Ω—å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç
        ctx.fillStyle = this.color;
        ctx.fillRect(this.x, this.y, this.width, this.height);
        
        // –ú–∞–ª—é—î–º–æ —Ä–∞–º–∫—É –Ω–∞–≤–∫–æ–ª–æ –∫—É–ª—ñ
        ctx.strokeStyle = white;
        ctx.lineWidth = 1;
        ctx.strokeRect(this.x, this.y, this.width, this.height);
        
        // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        ctx.restore();
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫—É–ª—è –∞–∫—Ç–∏–≤–Ω–∞
     * @returns {boolean} - true —è–∫—â–æ –∫—É–ª—è –∞–∫—Ç–∏–≤–Ω–∞
     */
    isBulletActive() {
        return this.isActive;
    }
    
    /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è –∫—É–ª—ñ
     */
    destroy() {
        this.isActive = false;
        console.log('üí• –ö—É–ª—è –∑–Ω–∏—â–µ–Ω–∞');
    }
    
    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–∂ –∫—É–ª—ñ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–ª—ñ–∑—ñ–π
     * @returns {Object} - –û–±'—î–∫—Ç –∑ –º–µ–∂–∞–º–∏ –∫—É–ª—ñ
     */
    getBounds() {
        return {
            x: this.x,
            y: this.y,
            width: this.width,
            height: this.height
        };
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–ª—ñ–∑—ñ—ó –∑ —ñ–Ω—à–∏–º –æ–±'—î–∫—Ç–æ–º
     * @param {Object} object - –û–±'—î–∫—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–ª—ñ–∑—ñ—ó
     * @returns {boolean} - true —è–∫—â–æ —î –∫–æ–ª—ñ–∑—ñ—è
     */
    checkCollision(object) {
        return this.x < object.x + object.width &&
               this.x + this.width > object.x &&
               this.y < object.y + object.height &&
               this.y + this.height > object.y;
    }
    
    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫—É–ª—è –≤–∏–π—à–ª–∞ –∑–∞ –º–µ–∂—ñ –µ–∫—Ä–∞–Ω—É
     * @param {number} canvasWidth - –®–∏—Ä–∏–Ω–∞ Canvas
     * @param {number} canvasHeight - –í–∏—Å–æ—Ç–∞ Canvas
     * @returns {boolean} - true —è–∫—â–æ –∫—É–ª—è –∑–∞ –º–µ–∂–∞–º–∏ –µ–∫—Ä–∞–Ω—É
     */
    isOutOfBounds(canvasWidth, canvasHeight) {
        return this.x < 0 || 
               this.x > canvasWidth || 
               this.y < 0 || 
               this.y > canvasHeight;
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫—É–ª—ñ
     * @param {number} x - –ù–æ–≤–∞ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     * @param {number} y - –ù–æ–≤–∞ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞
     */
    setPosition(x, y) {
        this.x = x;
        this.y = y;
    }
    
    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É –∫—É–ª—ñ
     * @param {string} direction - –ù–∞–ø—Ä—è–º–æ–∫ ('up', 'down', 'left', 'right')
     */
    setDirection(direction) {
        this.direction = direction;
    }
} 