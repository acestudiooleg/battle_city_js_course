import { Tank } from './Tank.js';
import { Bullet } from './Bullet.js';
import { red, darkGray, blue, orange, water, gray } from './colors.js';

/**
 * üéÆ –ö–ª–∞—Å Enemy - –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—î –≤–æ—Ä–æ–∂–æ–≥–æ —Ç–∞–Ω–∫–∞
 *
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –õ–æ–≥—ñ–∫—É –≤–æ—Ä–æ–∂–æ–≥–æ —Ç–∞–Ω–∫–∞
 * - –®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç
 * - –†—É—Ö —Ç–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫—É
 */

export class Enemy extends Tank {
  constructor(options = {}, logger) {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É Tank
    super(
      {
        ...options, // –ø–µ—Ä–µ–¥–∞—î–º–æ –≤—Å—ñ –æ–ø—Ü—ñ—ó –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–º—É –∫–ª–∞—Å—É
        // —á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        color: options.color || red,
        // –≤–æ—Ä–æ–≥ —Ä—É—Ö–∞—î—Ç—å—Å—è –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ –∑–∞ –≥—Ä–∞–≤—Ü—è
        speed: options.speed || 1,
        // –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ –¥—É–ª–∞ –≤–Ω–∏–∑
        direction: options.direction || 'down',
      },
      logger
    );

    // –®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç
    this.ai = {
      // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω AI
      state: 'patrol', // 'patrol', 'attack', 'moveToBase'

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
      patrol: {
        changeDirectionTime: 2000, // 2 —Å–µ–∫—É–Ω–¥–∏
        lastDirectionChange: 0,
      },

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—Ç–∞–∫–∏
      attack: {
        attackRange: 300, // –∑–±—ñ–ª—å—à–µ–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—è –∞—Ç–∞–∫–∏
        attackCooldown: 1500, // 1.5 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∞—Ç–∞–∫–∞–º–∏
        lastAttackTime: 0,
      },

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä—É—Ö—É –¥–æ —à—Ç–∞–±—É
      base: {
        x: 400, // –ø–æ–∑–∏—Ü—ñ—è —à—Ç–∞–±—É –ø–æ X (—Ü–µ–Ω—Ç—Ä –ø–æ–ª—è)
        y: 550, // –ø–æ–∑–∏—Ü—ñ—è —à—Ç–∞–±—É –ø–æ Y (–≤–Ω–∏–∑—É –ø–æ–ª—è)
        approachDistance: 50, // –≤—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —à—Ç–∞–±—É –¥–ª—è –∑—É–ø–∏–Ω–∫–∏
      },

      // –¢–∞–π–º–µ—Ä–∏
      timers: {
        stateChange: 0,
        directionChange: 0,
      },
    };

    // –°—Ç–∞–Ω —Ä—É—Ö—É
    this.movementState = {
      isMoving: false,
      lastDirection: 'down',
    };

    this.shooting = {
      canShoot: true,
      lastShotTime: 0,
      shootCooldown: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞ –º—ñ–∂ –ø–æ—Å—Ç—Ä—ñ–ª–∞–º–∏
      bullets: [], // –º–∞—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É–ª—å
      lastDirectionChange: 0, // —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É
    };

    // –∑–∞–ø–∏—Å—É—î–º–æ –≤ –ª–æ–≥
    this.logger.enemyAction('–í–æ—Ä–æ–≥ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π');
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ –¥–ª—è –ø–µ—Ä–µ—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è
   * @param {Object} target - –¶—ñ–ª—å (–≥—Ä–∞–≤–µ—Ü—å)
   */
  setTarget(target) {
    this.ai.chase = this.ai.chase || {};
    this.ai.chase.target = target;
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –≤–æ—Ä–æ–≥–∞
   * @param {number} deltaTime - –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  update(deltaTime) {
    if (!this.isAlive) return;

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä–∏
    this.updateTimers(deltaTime);

    // –û–Ω–æ–≤–ª—é—î–º–æ AI
    this.updateAI(deltaTime);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Ä—É—Ö
    this.updateMovement(deltaTime);

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç—Ä—ñ–ª—å–±—É
    this.updateShooting(deltaTime);

    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—É–ª—ñ
    this.updateBullets(deltaTime);
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä—ñ–≤
   * @param {number} deltaTime - –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  updateTimers(deltaTime) {
    this.ai.timers.stateChange += deltaTime;
    this.ai.timers.directionChange += deltaTime;
    this.ai.patrol.lastDirectionChange += deltaTime;
    this.ai.attack.lastAttackTime += deltaTime;
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É
   * @param {number} deltaTime - –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  updateAI(deltaTime) {
    const target = this.ai.chase?.target;
    const distanceToBase = this.getDistanceToBase();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–æ—Ä–æ–≥ –º–æ–∂–µ —Å—Ç—Ä—ñ–ª—è—Ç–∏ –ø–æ —à—Ç–∞–±—É (–≤ –º–µ–∂–∞—Ö –¥–∞–ª—å–Ω–æ—Å—Ç—ñ —Å—Ç—Ä—ñ–ª—å–±–∏)
    if (distanceToBase <= this.ai.attack.attackRange) {
      // –í–æ—Ä–æ–≥ –º–æ–∂–µ —Å—Ç—Ä—ñ–ª—è—Ç–∏ –ø–æ —à—Ç–∞–±—É - –∞—Ç–∞–∫—É—î–º–æ
      if (this.ai.state !== 'attack') {
        this.changeAIState('attack');
      }
    } else {
      // –í–æ—Ä–æ–≥ –¥–∞–ª–µ–∫–æ –≤—ñ–¥ —à—Ç–∞–±—É - —Ä—É—Ö–∞—î–º–æ—Å—è –¥–æ –Ω—å–æ–≥–æ
      if (this.ai.state !== 'moveToBase') {
        this.changeAIState('moveToBase');
      }
    }

    // –ó–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º–∫—É –ø—Ä–∏ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—ñ
    if (
      this.ai.state === 'patrol' &&
      this.ai.patrol.lastDirectionChange >= this.ai.patrol.changeDirectionTime
    ) {
      this.changePatrolDirection();
    }
  }

  /**
   * –ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É AI
   * @param {string} newState - –ù–æ–≤–∏–π —Å—Ç–∞–Ω
   */
  changeAIState(newState) {
    if (this.ai.state === newState) return;

    this.ai.state = newState;
    this.ai.timers.stateChange = 0;

    this.logger.enemyAction(`–í–æ—Ä–æ–≥ –∑–º—ñ–Ω–∏–≤ —Å—Ç–∞–Ω –Ω–∞: ${newState}`);

    switch (newState) {
      case 'patrol':
        this.setPatrolTarget();
        break;
      case 'moveToBase':
        this.logger.enemyAction('–í–æ—Ä–æ–≥ —Ä—É—Ö–∞—î—Ç—å—Å—è –¥–æ —à—Ç–∞–±—É');
        break;
      case 'attack':
        this.logger.enemyAction('–í–æ—Ä–æ–≥ –∞—Ç–∞–∫—É—î —à—Ç–∞–±');
        break;
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—É—Ö—É –≤–æ—Ä–æ–≥–∞
   * @param {number} deltaTime - –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  updateMovement(deltaTime) {
    let newX = this.x;
    let newY = this.y;
    let isMoving = false;

    switch (this.ai.state) {
      case 'patrol':
        // –ü–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è - —Ä—É—Ö —É –ø–æ—Ç–æ—á–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
        switch (this.direction) {
          case 'up':
            newY -= this.speed;
            break;
          case 'down':
            newY += this.speed;
            break;
          case 'left':
            newX -= this.speed;
            break;
          case 'right':
            newX += this.speed;
            break;
        }
        isMoving = true;
        break;

      case 'moveToBase':
        // –†—É—Ö –¥–æ —à—Ç–∞–±—É - —Ç—ñ–ª—å–∫–∏ –≤ –æ–¥–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É –∑–∞ —Ä–∞–∑
        const dx = this.ai.base.x - this.x;
        const dy = this.ai.base.y - this.y;

        // –°–ø–æ—á–∞—Ç–∫—É —Ä—É—Ö–∞—î–º–æ—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ, –ø–æ—Ç—ñ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ
        if (Math.abs(dx) > 5) { // –Ø–∫—â–æ —î –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
          if (dx > 0) {
            newX += this.speed;
            if (this.direction !== 'right') {
              this.direction = 'right';
              this.shooting.lastDirectionChange = 0; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É
            }
          } else {
            newX -= this.speed;
            if (this.direction !== 'left') {
              this.direction = 'left';
              this.shooting.lastDirectionChange = 0; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É
            }
          }
          isMoving = true;
        } else if (Math.abs(dy) > 5) { // –Ø–∫—â–æ —î –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å
          if (dy > 0) {
            newY += this.speed;
            if (this.direction !== 'down') {
              this.direction = 'down';
              this.shooting.lastDirectionChange = 0; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É
            }
          } else {
            newY -= this.speed;
            if (this.direction !== 'up') {
              this.direction = 'up';
              this.shooting.lastDirectionChange = 0; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É
            }
          }
          isMoving = true;
        }
        break;

      case 'attack':
        // –ê—Ç–∞–∫–∞ - –∑—É–ø–∏–Ω—è—î–º–æ—Å—è —ñ —Å—Ç—Ä—ñ–ª—è—î–º–æ –ø–æ —à—Ç–∞–±—É
        isMoving = false;
        // –î—É–ª–æ –±—É–¥–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –Ω–∞–ø—Ä—è–º–æ–∫ —à—Ç–∞–±—É –≤ updateShooting
        break;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º–µ–∂—ñ —Ä—É—Ö—É (–º–µ—Ç–æ–¥ –∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É Tank)
    if (this.checkBounds(newX, newY)) {
      this.x = newX;
      this.y = newY;
    } else {
      // –Ø–∫—â–æ –≤–∏–π—à–ª–∏ –∑–∞ –º–µ–∂—ñ, –∑–º—ñ–Ω—é—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π
      this.reverseDirection();
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Ä—É—Ö—É
    this.movementState.isMoving = isMoving;
    if (isMoving) {
      this.movementState.lastDirection = this.direction;
    }
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —à—Ç–∞–±—É
   * @returns {number} - –í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —à—Ç–∞–±—É
   */
  getDistanceToBase() {
    const dx = this.ai.base.x - this.x;
    const dy = this.ai.base.y - this.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü—ñ–ª—ñ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
   */
  setPatrolTarget() {
    // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –ø–æ–ª—è
    this.ai.patrol.targetX =
      Math.random() * (this.bounds.maxX - this.bounds.minX - 100) +
      this.bounds.minX +
      50;
    this.ai.patrol.targetY =
      Math.random() * (this.bounds.maxY - this.bounds.minY - 100) +
      this.bounds.minY +
      50;
  }

  /**
   * –ó–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º–∫—É –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è
   */
  changePatrolDirection() {
    const directions = ['up', 'down', 'left', 'right'];
    const randomDirection =
      directions[Math.floor(Math.random() * directions.length)];

    this.direction = randomDirection;
    this.ai.patrol.lastDirectionChange = 0;
    this.shooting.lastDirectionChange = 0; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É –¥–ª—è —Å—Ç—Ä—ñ–ª—å–±–∏

    this.logger.enemyAction(
      '–í–æ—Ä–æ–≥ –∑–º—ñ–Ω–∏–≤ –Ω–∞–ø—Ä—è–º–æ–∫ –ø–∞—Ç—Ä—É–ª—é–≤–∞–Ω–Ω—è',
      `–Ω–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫: ${randomDirection}`
    );
  }

  /**
   * –ó–º—ñ–Ω–∞ –Ω–∞–ø—Ä—è–º–∫—É –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π
   */
  reverseDirection() {
    const directionMap = {
      'up': 'down',
      'down': 'up',
      'left': 'right',
      'right': 'left'
    };

    const oldDirection = this.direction;
    this.direction = directionMap[this.direction] || 'down';
    this.shooting.lastDirectionChange = 0; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É –¥–ª—è —Å—Ç—Ä—ñ–ª—å–±–∏

    this.logger.enemyAction(
      '–í–æ—Ä–æ–≥ –∑–º—ñ–Ω–∏–≤ –Ω–∞–ø—Ä—è–º–æ–∫ –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π',
      `${oldDirection} ‚Üí ${this.direction}`
    );
  }

  /**
   * –ú–∞–ª—é–≤–∞–Ω–Ω—è –ø–æ–∑–Ω–∞—á–∫–∏ –≤–æ—Ä–æ–≥–∞ (—á–µ—Ä–≤–æ–Ω–∏–π —Ö—Ä–µ—Å—Ç–∏–∫) - –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥—É
   * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
   */
  drawTankMark(ctx) {
    // —Ä–æ–∑–º—ñ—Ä –ø–æ–∑–Ω–∞—á–∫–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
    const markSize = 6;
    // —Ü–µ–Ω—Ç—Ä —Ç–∞–Ω–∫–∞ –ø–æ X
    const centerX = this.x + this.width / 2;
    // —Ü–µ–Ω—Ç—Ä —Ç–∞–Ω–∫–∞ –ø–æ Y
    const centerY = this.y + this.height / 2;

    // —Ç–µ–º–Ω–æ-—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –ª—ñ–Ω—ñ–π
    ctx.strokeStyle = darkGray;
    // —Ç–æ–≤—â–∏–Ω–∞ –ª—ñ–Ω—ñ–π —Ö—Ä–µ—Å—Ç–∏–∫–∞
    ctx.lineWidth = 2;

    // –ø–æ—á–∏–Ω–∞—î–º–æ –º–∞–ª—é–≤–∞—Ç–∏ —à–ª—è—Ö
    ctx.beginPath();
    // –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞
    ctx.moveTo(centerX - markSize, centerY - markSize);
    // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
    ctx.lineTo(centerX + markSize, centerY + markSize);
    // –º–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—é
    ctx.stroke();

    // –ø–æ—á–∏–Ω–∞—î–º–æ –º–∞–ª—é–≤–∞—Ç–∏ –Ω–æ–≤–∏–π —à–ª—è—Ö
    ctx.beginPath();
    // –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞
    ctx.moveTo(centerX + markSize, centerY - markSize);
    // –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞
    ctx.lineTo(centerX - markSize, centerY + markSize);
    // –º–∞–ª—é—î–º–æ –ª—ñ–Ω—ñ—é
    ctx.stroke();
  }

  /**
   * –ú–∞–ª—é–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞–Ω—É AI
   * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
   */
  drawAIStateIndicator(ctx) {
    // –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞–Ω—ñ–≤
    const stateColors = {
      patrol: blue, // —Å–∏–Ω—ñ–π
      moveToBase: orange, // –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
      attack: red, // —á–µ—Ä–≤–æ–Ω–∏–π
    };

    const color = stateColors[this.ai.state] || gray;
    const indicatorSize = 3;

    // –†–æ–∑–º—ñ—â—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –ø—Ä–∞–≤–æ–º—É –≤–µ—Ä—Ö–Ω—å–æ–º—É –∫—É—Ç—ñ —Ç–∞–Ω–∫–∞
    const indicatorX = this.x + this.width - indicatorSize - 2;
    const indicatorY = this.y + 2;

    // –º–∞–ª—é—î–º–æ –º–∞–ª–µ–Ω—å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç
    ctx.fillStyle = color;
    ctx.fillRect(indicatorX, indicatorY, indicatorSize, indicatorSize);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É AI
   * @returns {Object} - –°—Ç–∞–Ω AI
   */
  getAIState() {
    return {
      state: this.ai.state,
      isMoving: this.movementState.isMoving,
      direction: this.direction,
      distanceToBase: this.getDistanceToBase(),
    };
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ —Å—Ç—Ä—ñ–ª—å–±–∏
   * @param {number} deltaTime - –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  updateShooting(deltaTime) {
    // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ—Å—Ç—Ä—ñ–ª—É
    this.shooting.lastShotTime += deltaTime;
    this.shooting.lastDirectionChange += deltaTime;

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ —Å—Ç—Ä—ñ–ª—è—Ç–∏ –∑–Ω–æ–≤—É
    if (this.shooting.lastShotTime >= this.shooting.shootCooldown) {
      this.shooting.canShoot = true;
    }

    // –í —Ä–µ–∂–∏–º—ñ –∞—Ç–∞–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥—É–ª–æ –≤ –Ω–∞–ø—Ä—è–º–æ–∫ —à—Ç–∞–±—É
    if (this.ai.state === 'attack') {
      this.aimAtBase();
      
      // –°—Ç—Ä—ñ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¥—É–ª–æ —Å–ø—Ä—è–º–æ–≤–∞–Ω–µ –Ω–∞ —à—Ç–∞–±
      if (this.shooting.canShoot && this.isAimingAtBase()) {
        this.shoot();
      }
    } else {
      // –°—Ç—Ä—ñ–ª—è—î–º–æ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –Ω–∞–ø—Ä—è–º–∫—É –∞–±–æ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
      const shouldShoot = this.shooting.lastDirectionChange < 100 || // –Ω–µ—â–æ–¥–∞–≤–Ω–æ –∑–º—ñ–Ω–∏–≤ –Ω–∞–ø—Ä—è–º–æ–∫
                         this.shooting.lastShotTime >= this.shooting.shootCooldown; // —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
      
      if (this.shooting.canShoot && shouldShoot) {
        this.shoot();
      }
    }
  }

  /**
   * –°—Ç—Ä—ñ–ª—å–±–∞ –≤–æ—Ä–æ–≥–∞
   */
  shoot() {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ —Å—Ç—Ä—ñ–ª—è—Ç–∏
    if (!this.shooting.canShoot) {
      return;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Å—Ç—Ä—ñ–ª—å–±–∏ (–º–µ—Ç–æ–¥ –∑ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É Tank)
    const shootPos = this.getShootPosition();

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫ –¥—É–ª–∞
    const finalDirection = this.direction;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫—É–ª—é
    const bullet = new Bullet(
      {
        x: shootPos.x,
        y: shootPos.y,
        direction: finalDirection,
        owner: 'enemy',
        speed: 3, // —à–≤–∏–¥–∫—ñ—Å—Ç—å –∫—É–ª—ñ –≤–æ—Ä–æ–≥–∞
      },
      this.logger
    );

    // –î–æ–¥–∞—î–º–æ –∫—É–ª—é –¥–æ –º–∞—Å–∏–≤—É
    this.shooting.bullets.push(bullet);

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ –ø–æ—Å—Ç—Ä—ñ–ª–∞–º–∏
    this.shooting.canShoot = false;
    this.shooting.lastShotTime = 0;

    // –õ–æ–≥—É—î–º–æ —Å—Ç—Ä—ñ–ª—å–±—É
    this.logger.enemyAction('–í–æ—Ä–æ–≥ —Å—Ç—Ä—ñ–ª—è—î', `–Ω–∞–ø—Ä—è–º–æ–∫: ${finalDirection}`);

    this.logger.gameEvent(
      '–í–æ—Ä–æ–≥ –≤–∏—Å—Ç—Ä—ñ–ª–∏–≤ –∫—É–ª—é',
      `–ø–æ–∑–∏—Ü—ñ—è: (${bullet.x}, ${bullet.y}), –Ω–∞–ø—Ä—è–º–æ–∫: ${finalDirection}`
    );
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—É–ª—å –≤–æ—Ä–æ–≥–∞
   * @param {number} deltaTime - –ß–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
   */
  updateBullets(deltaTime) {
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –∫—É–ª—ñ
    for (let i = this.shooting.bullets.length - 1; i >= 0; i--) {
      const bullet = this.shooting.bullets[i];

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫—É–ª—é
      bullet.update(deltaTime);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫—É–ª—è –∞–∫—Ç–∏–≤–Ω–∞
      if (!bullet.isBulletActive()) {
        // –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É –∫—É–ª—é
        this.shooting.bullets.splice(i, 1);
      }
    }
  }

  /**
   * –ú–∞–ª—é–≤–∞–Ω–Ω—è –∫—É–ª—å –≤–æ—Ä–æ–≥–∞
   * @param {CanvasRenderingContext2D} ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è
   */
  renderBullets(ctx) {
    // –ú–∞–ª—é—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É–ª—ñ
    this.shooting.bullets.forEach((bullet) => {
      bullet.render(ctx);
    });
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫—É–ª—å –≤–æ—Ä–æ–≥–∞
   * @returns {Array} - –ú–∞—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É–ª—å
   */
  getBullets() {
    return [...this.shooting.bullets];
  }

  /**
   * –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫—É–ª—ñ
   * @param {Bullet} bullet - –ö—É–ª—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
   */
  removeBullet(bullet) {
    const index = this.shooting.bullets.indexOf(bullet);
    if (index > -1) {
      this.shooting.bullets.splice(index, 1);
      bullet.destroy();
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∫—É–ª—å
   */
  clearBullets() {
    this.shooting.bullets.forEach((bullet) => bullet.destroy());
    this.shooting.bullets = [];
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏ –º—ñ–∂ –ø–æ—Å—Ç—Ä—ñ–ª–∞–º–∏
   * @param {number} cooldown - –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
   */
  setShootCooldown(cooldown) {
    this.shooting.shootCooldown = cooldown;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—Ç—Ä—ñ–ª—å–±—É
   * @returns {Object} - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—Ç—Ä—ñ–ª—å–±—É
   */
  getShootingInfo() {
    return {
      canShoot: this.shooting.canShoot,
      bulletsCount: this.shooting.bullets.length,
      cooldown: this.shooting.shootCooldown,
      lastShotTime: this.shooting.lastShotTime,
    };
  }

  /**
   * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞–ø—Ä—è–º–∫—É –¥–æ —à—Ç–∞–±—É
   * @returns {string} - –ù–∞–ø—Ä—è–º–æ–∫ –¥–æ —à—Ç–∞–±—É
   */
  calculateBaseDirection() {
    const dx = this.ai.base.x - this.x;
    const dy = this.ai.base.y - this.y;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫
    if (Math.abs(dx) > Math.abs(dy)) {
      return dx > 0 ? 'right' : 'left';
    } else {
      return dy > 0 ? 'down' : 'up';
    }
  }

  /**
   * –ü–æ–≤–æ—Ä–æ—Ç –¥—É–ª–∞ –≤ –Ω–∞–ø—Ä—è–º–æ–∫ —à—Ç–∞–±—É
   */
  aimAtBase() {
    const baseDirection = this.calculateBaseDirection();
    
    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥—É–ª–æ –≤ –Ω–∞–ø—Ä—è–º–æ–∫ —à—Ç–∞–±—É
    if (this.direction !== baseDirection) {
      const oldDirection = this.direction;
      this.direction = baseDirection;
      this.shooting.lastDirectionChange = 0; // –°–∫–∏–¥–∞—î–º–æ —á–∞—Å –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É –¥–ª—è —Å—Ç—Ä—ñ–ª—å–±–∏
      this.logger.enemyAction('–í–æ—Ä–æ–≥ –ø–æ–≤–µ—Ä–Ω—É–≤ –¥—É–ª–æ –Ω–∞ —à—Ç–∞–±', `${oldDirection} ‚Üí ${baseDirection}`);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥—É–ª–æ —Å–ø—Ä—è–º–æ–≤–∞–Ω–µ –Ω–∞ —à—Ç–∞–±
   * @returns {boolean} - true —è–∫—â–æ –¥—É–ª–æ —Å–ø—Ä—è–º–æ–≤–∞–Ω–µ –Ω–∞ —à—Ç–∞–±
   */
  isAimingAtBase() {
    const baseDirection = this.calculateBaseDirection();
    return this.direction === baseDirection;
  }
}
